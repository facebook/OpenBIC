#!/usr/bin/env python3

# Copyright (c) 2020 IBM Corp.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Really Easy socsec

import argparse
from socsec import socsec

socs = ['2600', '1030']
mode2_algos = list(f'RSA{rsa}-SHA{sha}'
                   for rsa in (1024, 2048, 3072, 4096)
                   for sha in (224, 256, 384, 512))

mode2aes_algos = list(f'AES-RSA{rsa}-SHA{sha}'
                      for rsa in (1024, 2048, 3072, 4096)
                      for sha in (224, 256, 384, 512))


def frob_algorithm(algo):
    return algo.replace('-', '_') if algo else algo


def secure_chained_images(args):
    pass
    sec = socsec.Sec()
    cot_part = [':'.join(image) for image in args.images]
    sec.make_sv_chain_image(frob_algorithm(args.algorithm),
                            cot_part,
                            args.rollback_index,
                            "",  # Image relative path: Require full path in args
                            args.rsa_key_endianness,
                            args.sign_stream,
                            args.sign_file)


def secure_bootstrap_image_mode2(args):
    sec = socsec.Sec()
    sec.make_secure_bl1_image(args.soc,
                              args.input,
                              args.rsa_key,
                              None,  # GCM AES key
                              args.output,
                              frob_algorithm(args.algorithm),
                              args.header_offset,
                              args.rollback_index,
                              None,  # Offset of encrypted image
                              None,  # AES key
                              None,  # RSA public key to encrypt AES key
                              False,  # Key in OTP
                              args.rsa_key_endianness,
                              None,  # Flash patch offset for ast2605
                              frob_algorithm(args.chain_style_signed[0]),
                              args.chain_style_signed[1],
                              args.chain_style_digest,
                              args.sign_stream,
                              args.sign_file,
                              args.stack_intersects_verification_region,
                              args.deterministic)


def secure_bootstrap_image_mode2aes1(args):
    sec = socsec.Sec()
    sec.make_secure_bl1_image(args.soc,
                              args.input,
                              args.rsa_key,
                              None,  # GCM AES key
                              args.output,
                              frob_algorithm(args.algorithm),
                              args.header_offset,
                              args.rollback_index,
                              args.encrypted_payload_offset,
                              args.aes_key,
                              None,  # RSA public key to encrypt AES key
                              True,  # Key in OTP
                              args.rsa_key_endianness,
                              None,  # Flash patch offset for ast2605
                              frob_algorithm(args.chain_style_signed[0]),
                              args.chain_style_signed[1],
                              args.chain_style_digest,
                              args.sign_stream,
                              args.sign_file,
                              args.stack_intersects_verification_region,
                              args.deterministic)


def secure_bootstrap_image_mode2aes2(args):
    sec = socsec.Sec()
    sec.make_secure_bl1_image(args.soc,
                              args.input,
                              args.rsa_key,
                              None,  # GCM AES key
                              args.output,
                              frob_algorithm(args.algorithm),
                              args.header_offset,
                              args.rollback_index,
                              args.encrypted_payload_offset,
                              args.aes_key,
                              args.rsa_aes_key,
                              False,  # Key in OTP
                              args.rsa_key_endianness,
                              None,  # Flash patch offset for ast2605
                              frob_algorithm(args.chain_style_signed[0]),
                              args.chain_style_signed[1],
                              args.chain_style_digest,
                              args.sign_stream,
                              args.sign_file,
                              args.stack_intersects_verification_region,
                              args.deterministic)


def secure_bootstrap_image_modegcm(args):
    sec = socsec.Sec()
    sec.make_secure_bl1_image(args.soc,
                              args.input,
                              None,  # RSA private key
                              args.aes_key,
                              args.output,
                              frob_algorithm(args.algorithm),
                              args.header_offset,
                              args.rollback_index,
                              args.encrypted_payload_offset,
                              None,  # AES key
                              None,  # RSA public key to encrypt AES key
                              False,  # Key in OTP
                              args.rsa_key_endianness,
                              None,  # Flash patch offset for ast2605
                              frob_algorithm(args.chain_style_signed[0]),
                              args.chain_style_signed[1],
                              args.chain_style_digest,
                              args.sign_stream,
                              args.sign_file,
                              args.stack_intersects_verification_region,
                              args.deterministic)


def verify_secure_image(args):
    verify = socsec.SecureBootVerify()
    verify.verify_secure_image(args.soc,
                               args.image,
                               args.output,
                               args.otp,
                               args.chained_image_offsets)


def resocsec():
    parser = argparse.ArgumentParser(description="Really Easy SOCSEC!")

    subparsers = parser.add_subparsers(title='socsec utilities',
                                       dest='subparser_name')

    chained = subparsers.add_parser('secure-chained-images',
                                    help='Sign the second- (u-boot) and third- (FIT) stage images for secure-boot verification')

    chained.add_argument('--deterministic', default=False, action='store_true',
                         help=argparse.SUPPRESS)
    chained.add_argument('--rsa-key-endianness', default='little',
                         choices=['little', 'big'],
                         help='Configure RSA key endianness in the OTP')
    chained.add_argument('--rollback-index', default=0, type=int,
                         help='Rollback protection index')

    helpers = chained.add_mutually_exclusive_group()
    helpers.add_argument('--sign-stream', help='Helper for signing via stdio')
    helpers.add_argument('--sign-file', help='Helper for signing files')

    chained.add_argument('algorithm', metavar='ALGO', choices=mode2_algos,
                         help='The RSA signing scheme')

    image_help = '''Parameters for signing a chained stage image. Takes 4
    arguments: the path to the input image, the output path for the signed
    image, the (private) RSA signing key and the (public) RSA verification
    key. May be specified multiple times to sign multiple images'''
    chained.add_argument('--image', dest='images', nargs=4, action='append',
                         required=True, help=image_help,
                         metavar=('INPUT', 'OUTPUT', 'SIGN_KEY', 'VERIFY_KEY'))
    chained.set_defaults(func=secure_chained_images)

    bl1 = subparsers.add_parser('secure-bootstrap-image',
                                help='Sign and optionally encrypt the bootstrap (SPL) image')
    bl1.add_argument('--deterministic', default=False, action='store_true',
                     help=argparse.SUPPRESS)
    bl1.add_argument('--rsa-key-endianness', default='little',
                     choices=['little', 'big'],
                     help='Configure RSA key endianness in the OTP')
    bl1.add_argument('--rollback-index', default=0, type=int,
                     help='Rollback protection index')
    bl1.add_argument('--header-offset', type=lambda x: int(x, 0),
                     help='Root-of-Trust header offset')
    helpers = bl1.add_mutually_exclusive_group()
    helpers.add_argument('--sign-stream', help='Helper for signing via stdio')
    helpers.add_argument('--sign-file', help='Helper for signing files')

    cot = bl1.add_mutually_exclusive_group()

    chain_style_signed_help = '''Signature-verified Chain-of-Trust. Requires
    the RSA signing scheme and the path to the RSA public key for verifying the
    chained image'''
    cot.add_argument('--chain-style-signed', nargs=2,
                     metavar=('ALGO', 'RSA_KEY'), default=(None, None),
                     help=chain_style_signed_help)

    chain_style_digest_help = '''Digest-verified Chain-of-Trust. Requires the
    path to the file containing the digest for verifying the chained image'''
    cot.add_argument('--chain-style-digest', metavar='DIGEST',
                     help=chain_style_digest_help)

    stack_intersects_verification_region_help='''By default, the
    maximum size of SPL images socsec will sign is 60KB, since,
    historically, the SoCs have been using the top of the SRAM
    for the SPL execution stack. However, on 2600 (A1) and above
    SoCs, an additional 24KB SRAM can be used for the stack,
    allowing the verification region to occuppy the entire 64KB
    (including signature). For these models of boards, this
    layout will also be the default in future SDK releases.
    Use this parameter to explicitly indicate that the SPL image
    being signed has (=true) or has not (=false) the SPL stack
    overlapping the 64KB verification region. With this argument
    set to \'false\', socsec will sign SPL images up towards
    64KB (including 512B signature)'''
    bl1.add_argument('--stack-intersects-verification-region',
                            dest='stack_intersects_verification_region',
                            choices=['true', 'false'], default=None,
                            help=stack_intersects_verification_region_help)

    schemes = bl1.add_subparsers(title='Secure-boot modes')

    # Mode 2
    mode2 = schemes.add_parser('mode2', help='Unencrypted, RSA-signed image')

    mode2.set_defaults(func=secure_bootstrap_image_mode2)
    mode2.add_argument('soc', metavar='SOC', choices=socs,
                       help='The target SoC')
    mode2.add_argument('algorithm', metavar='ALGO', choices=mode2_algos,
                       help='The RSA signing scheme')
    mode2.add_argument('rsa_key', metavar='RSA_KEY',
                       help='Private RSA key for signing the image')
    mode2.add_argument('input', metavar='INPUT', type=argparse.FileType('rb'),
                       help='The bootloader image to sign')
    mode2.add_argument('output', metavar='OUTPUT', type=argparse.FileType('wb'),
                       help='The signed bootloader image')

    # Mode 2 Option 1
    mode2aes1 = schemes.add_parser('mode2aes1',
                                   help='AES-encrypted, RSA-signed image (Option 1)')

    mode2aes1.set_defaults(func=secure_bootstrap_image_mode2aes1)
    mode2aes1.add_argument('soc', metavar='SOC', choices=socs,
                           help='The target SoC')
    mode2aes1.add_argument('algorithm', metavar='ALGO', choices=mode2aes_algos,
                           help='The cryptographic scheme')
    mode2aes1.add_argument('aes_key', metavar='AES_KEY',
                           type=argparse.FileType('rb'),
                           help='AES encryption key')
    mode2aes1.add_argument('rsa_key', metavar='RSA_KEY',
                           help='Private RSA key for signing the image')
    mode2aes1.add_argument('input', metavar='INPUT',
                           type=argparse.FileType('rb'),
                           help='The bootloader image to sign')
    mode2aes1.add_argument('output', metavar='OUTPUT',
                           type=argparse.FileType('wb'),
                           help='The signed bootloader image')
    mode2aes1.add_argument('--encrypted-payload-offset', metavar="OFFSET",
                           type=lambda x: int(x, 0),
                           help='Offset of the encrypted payload in the image')

    # Mode 2 Option 2
    mode2aes2 = schemes.add_parser('mode2aes2',
                                   help='AES-encrypted, RSA-signed image (Option 2)')

    mode2aes2.set_defaults(func=secure_bootstrap_image_mode2aes2)
    mode2aes2.add_argument('soc', metavar='SOC', choices=socs,
                           help='The target SoC')
    mode2aes2.add_argument('algorithm', metavar='ALGO', choices=mode2aes_algos,
                           help='The cryptographic scheme')
    mode2aes2.add_argument('aes_key', metavar='AES_KEY',
                           type=argparse.FileType('rb'),
                           help='AES encryption key')
    mode2aes2.add_argument('rsa_aes_key', metavar='RSA_AES_KEY',
                           help='Public RSA key for encrypting the AES key')
    mode2aes2.add_argument('rsa_key', metavar='RSA_KEY',
                           help='Private RSA key for signing the image')
    mode2aes2.add_argument('input', metavar='INPUT',
                           type=argparse.FileType('rb'),
                           help='The bootloader image to sign')
    mode2aes2.add_argument('output', metavar='OUTPUT',
                           type=argparse.FileType('wb'),
                           help='The signed bootloader image')
    mode2aes2.add_argument('--encrypted-payload-offset', metavar="OFFSET",
                           type=lambda x: int(x, 0),
                           help='Offset of the encrypted payload in the image')

    # Mode GCM
    modegcm = schemes.add_parser('modegcm',
                                 help='AES-GCM encrypted-and-authenticated image')

    modegcm.set_defaults(func=secure_bootstrap_image_modegcm,
                         algorithm='AES-GCM')
    modegcm.add_argument('soc', metavar='SOC', choices=socs,
                         help='The target SoC')
    modegcm.add_argument('aes_key', metavar='AES_KEY',
                         type=argparse.FileType('rb'),
                         help='AES GCM encryption key')
    modegcm.add_argument('input', metavar='INPUT',
                         type=argparse.FileType('rb'),
                         help='The bootloader image to encrypt/authenticate')
    modegcm.add_argument('output', metavar='OUTPUT',
                         type=argparse.FileType('wb'),
                         help='The encrypted/authenticated bootloader image')
    modegcm.add_argument('--encrypted-payload-offset', metavar="OFFSET",
                         type=lambda x: int(x, 0),
                         help='Offset of the encrypted payload in the image')

    verify = subparsers.add_parser('verify-secure-image',
                                   help='Verify a secure image against an OTP configuration')
    verify.set_defaults(func=verify_secure_image)
    verify.add_argument('--output', metavar='OUTPUT', type=argparse.FileType('wb'),
                        help='Write the processed image to the provided path')
    verify.add_argument('soc', metavar='SOC', choices=socs,
                        help='The target SoC')
    verify.add_argument('otp', metavar='OTP_IMAGE', type=argparse.FileType('rb'),
                        help='The OTP image generated by otptool')
    verify.add_argument('image', metavar='SECURE_IMAGE', type=argparse.FileType('rb'),
                        help='The secured flash image (see secure-bootstrap-image, secure-chained-images)')
    verify.add_argument('chained_image_offsets', metavar='OFFSET', nargs='*',
                        type=int,
                        help='The offset of a secure chained image in the provided flash image')

    args = parser.parse_args()

    if 'func' in args:
        args.func(args)
        if (args.subparser_name == 'secure-bootloader' and
                args.stack_intersects_verification_region is None):
            print('WARNING: --stack-intersects-verification-region={true|false} '
                  'must be specified to ensure forwards compatibility.')
    else:
        parser.print_help()


if __name__ == '__main__':
    resocsec()
