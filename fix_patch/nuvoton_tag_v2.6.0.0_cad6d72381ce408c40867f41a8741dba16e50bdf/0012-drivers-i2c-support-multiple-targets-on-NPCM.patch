From 52f309d3efb13d9200265a897d3e53ab3bc31dc2 Mon Sep 17 00:00:00 2001
From: James Chiang <cpchiang1@nuvoton.com>
Date: Tue, 14 Jan 2025 18:05:14 -0800
Subject: [PATCH 11/11] drivers: i2c: support multiple targets on NPCM

Signed-off-by: Tyrone Ting <kfting@nuvoton.com>
---
 drivers/i2c/i2c_npcm4xx.c | 258 ++++++++++++++++++++++++++++++--------
 1 file changed, 205 insertions(+), 53 deletions(-)

diff --git a/drivers/i2c/i2c_npcm4xx.c b/drivers/i2c/i2c_npcm4xx.c
index b16aa2dd56e..4651fe62080 100755
--- a/drivers/i2c/i2c_npcm4xx.c
+++ b/drivers/i2c/i2c_npcm4xx.c
@@ -41,6 +41,7 @@ LOG_MODULE_REGISTER(i2c_npcm4xx, LOG_LEVEL_ERR);
 
 /* Data abort timeout */
 #define ABORT_TIMEOUT 10000
+#define I2C_SLAVE_NUM 10
 
 #define I2C_RECOVER_BUS_DELAY_US 5
 
@@ -53,6 +54,19 @@ enum i2c_npcm4xx_oper_state {
 	I2C_NPCM4XX_OPER_STA_QUICK,
 };
 
+enum i2c_npcm4xx_slave_addrno {
+    I2C_SLAVE_ADDR_1,
+    I2C_SLAVE_ADDR_2,
+    I2C_SLAVE_ADDR_3,
+    I2C_SLAVE_ADDR_4,
+    I2C_SLAVE_ADDR_5,
+    I2C_SLAVE_ADDR_6,
+    I2C_SLAVE_ADDR_7,
+    I2C_SLAVE_ADDR_8,
+    I2C_SLAVE_ADDR_9,
+    I2C_SLAVE_ADDR_10,
+};
+
 /* Device configuration */
 struct i2c_npcm4xx_config {
 	uintptr_t base;                 /* i2c controller base address */
@@ -78,7 +92,8 @@ struct i2c_npcm4xx_data {
 	uint8_t tx_buf[CONFIG_I2C_MAX_RX_SIZE];
 	uint8_t *rx_msg_buf;
 	int err_code;
-	struct i2c_slave_config *slave_cfg;
+	struct i2c_slave_config *slave_cfg[I2C_SLAVE_NUM];
+	enum i2c_npcm4xx_slave_addrno match_addr_no;
 };
 #pragma pack()
 
@@ -493,8 +508,6 @@ static void i2c_npcm4xx_slave_isr(const struct device *dev)
 {
 	struct i2c_reg *const inst = I2C_INSTANCE(dev);
 	struct i2c_npcm4xx_data *const data = I2C_DRV_DATA(dev);
-	const struct i2c_slave_callbacks *slave_cb =
-		data->slave_cfg->callbacks;
 	uint16_t len;
 	uint8_t overflow_data;
 
@@ -553,23 +566,50 @@ static void i2c_npcm4xx_slave_isr(const struct device *dev)
 	/* Address match occurred                        */
 	/* --------------------------------------------- */
 	if (inst->SMBnST & BIT(NPCM4XX_SMBnST_NMATCH)) {
+		uint8_t i = 0;
+		const struct i2c_slave_callbacks *slave_cb;
+
+		if (inst->SMBnCST2 & BIT(NPCM4XX_SMBnCST2_MATCHA1F))
+			i = I2C_SLAVE_ADDR_1;
+		else if (inst->SMBnCST2 & BIT(NPCM4XX_SMBnCST2_MATCHA2F))
+			i = I2C_SLAVE_ADDR_2;
+		else if (inst->SMBnCST2 & BIT(NPCM4XX_SMBnCST2_MATCHA3F))
+			i = I2C_SLAVE_ADDR_3;
+		else if (inst->SMBnCST2 & BIT(NPCM4XX_SMBnCST2_MATCHA4F))
+			i = I2C_SLAVE_ADDR_4;
+		else if (inst->SMBnCST2 & BIT(NPCM4XX_SMBnCST2_MATCHA5F))
+			i = I2C_SLAVE_ADDR_5;
+		else if (inst->SMBnCST2 & BIT(NPCM4XX_SMBnCST2_MATCHA6F))
+			i = I2C_SLAVE_ADDR_6;
+		else if (inst->SMBnCST2 & BIT(NPCM4XX_SMBnCST2_MATCHA7F))
+			i = I2C_SLAVE_ADDR_7;
+		else if (inst->SMBnCST3 & BIT(NPCM4XX_SMBnCST3_MATCHA8F))
+			i = I2C_SLAVE_ADDR_8;
+		else if (inst->SMBnCST3 & BIT(NPCM4XX_SMBnCST3_MATCHA9F))
+			i = I2C_SLAVE_ADDR_9;
+		else if (inst->SMBnCST3 & BIT(NPCM4XX_SMBnCST3_MATCHA10F))
+			i = I2C_SLAVE_ADDR_10;
+
+		data->match_addr_no = i;
+		slave_cb = data->slave_cfg[data->match_addr_no]->callbacks;
+
 		if (inst->SMBnST & BIT(NPCM4XX_SMBnST_XMIT)) {
 			/* slave received Read-Address */
 			if (data->slave_oper_state != I2C_NPCM4XX_OPER_STA_START) {
 				/* slave received data before */
 				len = 0;
 				while (len < i2c_npcm4xx_get_dma_cnt(dev)) {
-					slave_cb->write_received(data->slave_cfg,
+					slave_cb->write_received(data->slave_cfg[i],
 								 data->rx_buf[len]);
 					len++;
 				}
 			}
 
 			/* prepare tx data */
-			if (slave_cb->read_requested(data->slave_cfg, data->tx_buf) == 0) {
+			if (slave_cb->read_requested(data->slave_cfg[i], data->tx_buf) == 0) {
 				len = 0;
 				while (++len < sizeof(data->tx_buf)) {
-					if (slave_cb->read_processed(data->slave_cfg,
+					if (slave_cb->read_processed(data->slave_cfg[i],
 							data->tx_buf + len) != 0) {
 						break;
 					}
@@ -593,7 +633,7 @@ static void i2c_npcm4xx_slave_isr(const struct device *dev)
 			data->slave_oper_state = I2C_NPCM4XX_OPER_STA_READ;
 			/* Set DMA register to get data */
 			i2c_npcm4xx_start_DMA(dev, (uint32_t)data->rx_buf, sizeof(data->rx_buf));
-			slave_cb->write_requested(data->slave_cfg);
+			slave_cb->write_requested(data->slave_cfg[i]);
 		}
 		/* Clear address match bit & SDA pull high */
 		inst->SMBnST = BIT(NPCM4XX_SMBnST_NMATCH);
@@ -603,18 +643,22 @@ static void i2c_npcm4xx_slave_isr(const struct device *dev)
 	/* SDA status is set - transmit or receive       */
 	/* --------------------------------------------- */
 	if (inst->SMBnST & BIT(NPCM4XX_SMBnST_SDAST)) {
+		const struct i2c_slave_callbacks *slave_cb =
+			data->slave_cfg[data->match_addr_no]->callbacks;
+
 		if (data->slave_oper_state == I2C_NPCM4XX_OPER_STA_READ) {
 			/* Over Flow */
 			overflow_data = inst->SMBnSDA;
 
 			len = 0;
 			while (len < i2c_npcm4xx_get_dma_cnt(dev)) {
-				if (slave_cb->write_received(data->slave_cfg, data->rx_buf[len])) {
+				if (slave_cb->write_received(data->slave_cfg[data->match_addr_no],
+							data->rx_buf[len])) {
 					break;
 				}
 				len++;
 			}
-			slave_cb->write_received(data->slave_cfg, overflow_data);
+			slave_cb->write_received(data->slave_cfg[data->match_addr_no], overflow_data);
 			data->slave_oper_state = I2C_NPCM4XX_OPER_STA_START;
 		} else {
 			/* No Enough DMA data to send */
@@ -626,15 +670,19 @@ static void i2c_npcm4xx_slave_isr(const struct device *dev)
 	/* Slave STOP occurred                           */
 	/* --------------------------------------------- */
 	if (inst->SMBnST & BIT(NPCM4XX_SMBnST_SLVSTP)) {
+		const struct i2c_slave_callbacks *slave_cb =
+			data->slave_cfg[data->match_addr_no]->callbacks;
+
 		if (data->slave_oper_state == I2C_NPCM4XX_OPER_STA_READ) {
 			len = 0;
 			while (len < i2c_npcm4xx_get_dma_cnt(dev)) {
-				slave_cb->write_received(data->slave_cfg, data->rx_buf[len]);
+				slave_cb->write_received(data->slave_cfg[data->match_addr_no],
+						data->rx_buf[len]);
 				len++;
 			}
 		}
 		if (data->slave_oper_state != I2C_NPCM4XX_OPER_STA_IDLE) {
-			slave_cb->stop(data->slave_cfg);
+			slave_cb->stop(data->slave_cfg[data->match_addr_no]);
 		}
 		data->slave_oper_state = I2C_NPCM4XX_OPER_STA_START;
 		/* clear STOP flag */
@@ -642,15 +690,84 @@ static void i2c_npcm4xx_slave_isr(const struct device *dev)
 	}
 }
 
-static void i2c_set_slave_addr(const struct device *dev, uint8_t slave_addr)
+static uint8_t i2c_ret_slave(const struct device *dev, int index)
 {
 	struct i2c_reg *const inst = I2C_INSTANCE(dev);
 
-	/* set slave addr 1 */
-	inst->SMBnADDR1 = (slave_addr | BIT(NPCM4XX_SMBnADDR_SAEN));
+	switch (index) {
+		case 0:
+			return inst->SMBnADDR1;
+		case 1:
+			return inst->SMBnADDR2;
+		case 2:
+			return inst->SMBnADDR3;
+		case 3:
+			return inst->SMBnADDR4;
+		case 4:
+			return inst->SMBnADDR5;
+		case 5:
+			return inst->SMBnADDR6;
+		case 6:
+			return inst->SMBnADDR7;
+		case 7:
+			return inst->SMBnADDR8;
+		case 8:
+			return inst->SMBnADDR9;
+		case 9:
+			return inst->SMBnADDR10;
+	}
+
+	return 0;
+}
+
+static void i2c_conf_slave(const struct device *dev, int index, uint8_t value)
+{
+	struct i2c_reg *const inst = I2C_INSTANCE(dev);
+
+	switch (index) {
+		case 0:
+			inst->SMBnADDR1 = value;
+			break;
+		case 1:
+			inst->SMBnADDR2 = value;
+			break;
+		case 2:
+			inst->SMBnADDR3 = value;
+			break;
+		case 3:
+			inst->SMBnADDR4 = value;
+			break;
+		case 4:
+			inst->SMBnADDR5 = value;
+			break;
+		case 5:
+			inst->SMBnADDR6 = value;
+			break;
+		case 6:
+			inst->SMBnADDR7 = value;
+			break;
+		case 7:
+			inst->SMBnADDR8 = value;
+			break;
+		case 8:
+			inst->SMBnADDR9 = value;
+			break;
+		case 9:
+			inst->SMBnADDR10 = value;
+			break;
+	}
+}
+
+static void i2c_set_slave_addr(const struct device *dev, int index, uint8_t slave_addr)
+{
+	struct i2c_reg *const inst = I2C_INSTANCE(dev);
+
+	/* set slave addr */
+	i2c_conf_slave(dev, index, (slave_addr | BIT(NPCM4XX_SMBnADDR_SAEN)));
 
 	/* Enable I2C address match interrupt */
-	inst->SMBnCTL1 |= BIT(NPCM4XX_SMBnCTL1_NMINTE);
+	if (!(inst->SMBnCTL1 & BIT(NPCM4XX_SMBnCTL1_NMINTE)))
+		inst->SMBnCTL1 |= BIT(NPCM4XX_SMBnCTL1_NMINTE);
 }
 
 
@@ -658,7 +775,7 @@ static int i2c_npcm4xx_slave_register(const struct device *dev,
 				      struct i2c_slave_config *cfg)
 {
 	struct i2c_npcm4xx_data *data = I2C_DRV_DATA(dev);
-	int ret = 0;
+	int ret = 0, free_index = -1, i;
 
 	if (!cfg) {
 		return -EINVAL;
@@ -670,16 +787,29 @@ static int i2c_npcm4xx_slave_register(const struct device *dev,
 		return -EBUSY;
 	}
 
-	if (data->slave_cfg) {
-		/* slave is already registered */
+	for (i = 0; i < I2C_SLAVE_NUM; i++) {
+		if (!data->slave_cfg[i]) {
+			if (free_index == -1)
+				free_index = i;
+			continue;
+		}
+
+		if (data->slave_cfg[i]->address == cfg->address) {
+			/* slave is already registered */
+			ret = -EBUSY;
+			goto exit;
+		}
+	}
+
+	if (free_index == -1) {
 		ret = -EBUSY;
 		goto exit;
 	}
 
-	data->slave_cfg = cfg;
+	data->slave_cfg[free_index] = cfg;
 	data->slave_oper_state = I2C_NPCM4XX_OPER_STA_START;
 	/* set slave addr, cfg->address is 7 bit address */
-	i2c_set_slave_addr(dev, cfg->address);
+	i2c_set_slave_addr(dev, free_index, cfg->address);
 
 exit:
 	i2c_npcm4xx_mutex_unlock(dev);
@@ -689,14 +819,10 @@ exit:
 static int i2c_npcm4xx_slave_unregister(const struct device *dev,
 					struct i2c_slave_config *config)
 {
+	int i, found_index = -1;
 	struct i2c_reg *const inst = I2C_INSTANCE(dev);
 	struct i2c_npcm4xx_data *data = I2C_DRV_DATA(dev);
 
-
-	if (!data->slave_cfg) {
-		return -EINVAL;
-	}
-
 	if (data->slave_oper_state != I2C_NPCM4XX_OPER_STA_START &&
 	    data->master_oper_state != I2C_NPCM4XX_OPER_STA_IDLE) {
 		return -EBUSY;
@@ -706,17 +832,41 @@ static int i2c_npcm4xx_slave_unregister(const struct device *dev,
 		return -EBUSY;
 	}
 
-	/* clear slave addr 1 */
-	inst->SMBnADDR1 = 0;
+	for (i = 0; i < I2C_SLAVE_NUM; i++) {
+		if (!data->slave_cfg[i])
+			continue;
 
-	/* Disable I2C address match interrupt */
-	inst->SMBnCTL1 &= ~BIT(NPCM4XX_SMBnCTL1_NMINTE);
+		if (data->slave_cfg[i]->address == config->address) {
+			found_index = i;
+			break;
+		}
+	}
+
+	if (found_index == -1) {
+		i2c_npcm4xx_mutex_unlock(dev);
+		return -EINVAL;
+	}
+
+	/* clear slave addr */
+	i2c_conf_slave(dev, found_index, 0);
 
 	/* clear all interrupt status */
 	inst->SMBnST = 0xFF;
 
 	data->slave_oper_state = I2C_NPCM4XX_OPER_STA_IDLE;
-	data->slave_cfg = 0;
+	data->slave_cfg[found_index] = 0;
+
+	/* Disable I2C address match interrupt
+	 * only if all the slave addresses are
+	 * removed.
+	 */
+	for (i = 0; i < I2C_SLAVE_NUM; i++) {
+		if (data->slave_cfg[i])
+			break;
+	}
+
+	if (i == I2C_SLAVE_NUM)
+		inst->SMBnCTL1 &= ~BIT(NPCM4XX_SMBnCTL1_NMINTE);
 
 	i2c_npcm4xx_mutex_unlock(dev);
 
@@ -750,6 +900,7 @@ static int i2c_npcm4xx_init(const struct device *dev)
 	struct i2c_npcm4xx_data *const data = I2C_DRV_DATA(dev);
 	const struct device *const clk_dev = device_get_binding(NPCM4XX_CLK_CTRL_NAME);
 	struct i2c_reg *const inst = I2C_INSTANCE(dev);
+	uint8_t i;
 
 
 
@@ -782,6 +933,10 @@ static int i2c_npcm4xx_init(const struct device *dev)
 	/* Initialize driver status machine */
 	data->master_oper_state = I2C_NPCM4XX_OPER_STA_IDLE;
 
+	for (i = 0; i < I2C_SLAVE_NUM; i++) {
+		data->slave_cfg[i] = NULL;
+	}
+
 	return 0;
 }
 
@@ -898,16 +1053,12 @@ int i2c_npcm4xx_recover_bus(const struct device *dev)
 static int i2c_npcm4xx_transfer(const struct device *dev, struct i2c_msg *msgs,
 				uint8_t num_msgs, uint16_t addr)
 {
-	uint8_t value, i;
-	bool bus_busy;
 	struct i2c_reg *const inst = I2C_INSTANCE(dev);
 	const struct i2c_npcm4xx_config *const config = I2C_DRV_CONFIG(dev);
-
-#if (CONFIG_MASTER_HW_TIMEOUT_EN == 'Y')
-	struct i2c_reg *const inst = I2C_INSTANCE(dev);
-#endif
 	struct i2c_npcm4xx_data *const data = I2C_DRV_DATA(dev);
-	int ret;
+	int i, ret;
+	uint8_t value[I2C_SLAVE_NUM];
+	bool bus_busy;
 
 	if (i2c_npcm4xx_mutex_lock(dev, I2C_WAITING_TIME) != 0)
 		return -EBUSY;
@@ -915,10 +1066,11 @@ static int i2c_npcm4xx_transfer(const struct device *dev, struct i2c_msg *msgs,
 	for (i = 0; i < 3; i++) {
 		bus_busy = inst->SMBnCST & BIT(NPCM4XX_SMBnCST_BB);
 		if (!bus_busy) {
-			/* Disable slave addr 1 */
-			value = inst->SMBnADDR1;
-			value &= ~BIT(NPCM4XX_SMBnADDR_SAEN);
-			inst->SMBnADDR1 = value;
+			/* save original slave addr setting and disable all the slave devices */
+			for (i = 0; i < I2C_SLAVE_NUM; i++) {
+				value[i] = i2c_ret_slave(dev, i);
+				i2c_conf_slave(dev, i, (value[i] & ~BIT(NPCM4XX_SMBnADDR_SAEN)));
+			}
 			break;
 		}
 		k_busy_wait(config->wait_free_time);
@@ -938,10 +1090,10 @@ static int i2c_npcm4xx_transfer(const struct device *dev, struct i2c_msg *msgs,
 	data->err_code = 0;
 	if (i2c_npcm4xx_combine_msg(dev, msgs, num_msgs) < 0) {
 		i2c_npcm4xx_mutex_unlock(dev);
-		/* Enable slave addr 1 */
-		value = inst->SMBnADDR1;
-		value |= BIT(NPCM4XX_SMBnADDR_SAEN);
-		inst->SMBnADDR1 = value;
+		/* restore slave addr setting */
+		for (i = 0; i < I2C_SLAVE_NUM; i++) {
+			i2c_conf_slave(dev, i, value[i]);
+		}
 		return -EPROTONOSUPPORT;
 	}
 
@@ -950,10 +1102,10 @@ static int i2c_npcm4xx_transfer(const struct device *dev, struct i2c_msg *msgs,
 		if (num_msgs != 1) {
 			/* Quick command must have one msg */
 			i2c_npcm4xx_mutex_unlock(dev);
-			/* Enable slave addr 1 */
-			value = inst->SMBnADDR1;
-			value |= BIT(NPCM4XX_SMBnADDR_SAEN);
-			inst->SMBnADDR1 = value;
+			/* restore slave addr setting */
+			for (i = 0; i < I2C_SLAVE_NUM; i++) {
+				i2c_conf_slave(dev, i, value[i]);
+			}
 			return -EPROTONOSUPPORT;
 		}
 		if ((msgs->flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
@@ -990,10 +1142,10 @@ static int i2c_npcm4xx_transfer(const struct device *dev, struct i2c_msg *msgs,
 
 	i2c_npcm4xx_mutex_unlock(dev);
 
-	/* Enable slave addr 1 */
-	value = inst->SMBnADDR1;
-	value |= BIT(NPCM4XX_SMBnADDR_SAEN);
-	inst->SMBnADDR1 = value;
+	/* restore slave addr setting */
+	for (i = 0; i < I2C_SLAVE_NUM; i++) {
+		i2c_conf_slave(dev, i, value[i]);
+	}
 
 	return ret;
 }
-- 
2.17.1

