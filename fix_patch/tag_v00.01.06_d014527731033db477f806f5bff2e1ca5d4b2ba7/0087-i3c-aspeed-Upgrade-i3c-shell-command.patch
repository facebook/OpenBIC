From 298edae8fa31498a82e34e3c93afab8e305bc525 Mon Sep 17 00:00:00 2001
From: Sara Lin <sara_sy_lin@wiwynn.com>
Date: Tue, 24 Dec 2024 16:02:54 +0800
Subject: [PATCH] i3c: patch: Upgrade i3c shell command

Support send ENTDAA.
Use 0xff as the default CCC ID.
Support "stress" command for bic-to-bic test.

---
 drivers/i3c/i3c_shell.c              | 337 ++++++++++++++++++++++++++-
 drivers/i3c/slave/i3c_slave_mqueue.c |   6 +
 include/drivers/i3c/i3c.h            |   1 +
 3 files changed, 336 insertions(+), 8 deletions(-)

diff --git a/drivers/i3c/i3c_shell.c b/drivers/i3c/i3c_shell.c
index 3d6afa6cff..c2c1db52f6 100644
--- a/drivers/i3c/i3c_shell.c
+++ b/drivers/i3c/i3c_shell.c
@@ -89,7 +89,7 @@ static int cmd_priv_xfer(const struct shell *shell, size_t argc, char **argv)
 
 	dev = device_get_binding(argv[1]);
 	if (!dev) {
-		shell_error(shell, "I3C: Device driver %s not found.", argv[1]);
+		shell_error(shell, "I3C: Device %s not found.", argv[1]);
 		return -ENODEV;
 	}
 
@@ -167,12 +167,12 @@ static int cmd_send_ccc(const struct shell *shell, size_t argc, char **argv)
 
 	dev = device_get_binding(argv[1]);
 	if (!dev) {
-		shell_error(shell, "I3C: Device driver %s not found.", argv[1]);
+		shell_error(shell, "I3C: Device %s not found.", argv[1]);
 		return -ENODEV;
 	}
 
 	ccc.rnw = 0;
-	ccc.id = 0;
+	ccc.id = 0xff;
 
 	while ((c = shell_getopt(shell, argc - 1, &argv[1], "ha:i:w:r:")) != -1) {
 		state = shell_getopt_state_get(shell);
@@ -213,7 +213,7 @@ static int cmd_send_ccc(const struct shell *shell, size_t argc, char **argv)
 		}
 	}
 
-	if (ccc.id == 0) {
+	if (ccc.id == 0xff) {
 		shell_print(shell, "CCC ID not assigned\n");
 		return SHELL_CMD_HELP_PRINTED;
 	}
@@ -247,7 +247,7 @@ static int cmd_attach(const struct shell *shell, size_t argc, char **argv)
 
 	dev = device_get_binding(argv[1]);
 	if (!dev) {
-		shell_error(shell, "I3C: Device driver %s not found.", argv[1]);
+		shell_error(shell, "I3C: Device %s not found.", argv[1]);
 		return -ENODEV;
 	}
 
@@ -283,22 +283,74 @@ static int cmd_attach(const struct shell *shell, size_t argc, char **argv)
 		}
 	}
 
-	shell_print(shell, "Attach address 0x%02x to %s\n", desc->info.assigned_dynamic_addr,
+	shell_print(shell, "Attach address 0x%02x to %s", desc->info.assigned_dynamic_addr,
 		    dev->name);
 	ret = i3c_master_attach_device(dev, desc);
 	if (ret) {
-		shell_print(shell, "Failed to attach device: %d\n", ret);
+		shell_print(shell, "Failed to attach device: %d", ret);
 	} else {
+		shell_print(shell, "device with DA %02x is attached to i3c_shell_desc_tbl[%d]",
+			    desc->info.dynamic_addr, i3c_shell_num_of_descs);
 		i3c_shell_num_of_descs++;
 	}
 
 	return ret;
 }
 
+static const char entdaa_helper[] = "i3c entdaa <dev> -i <index of the target device>";
+static int cmd_entdaa(const struct shell *shell, size_t argc, char **argv)
+{
+	const struct device *dev;
+	struct getopt_state *state;
+	int c, ret, index = -1;
+
+	dev = device_get_binding(argv[1]);
+	if (!dev) {
+		shell_error(shell, "I3C: Device %s not found.", argv[1]);
+		return -ENODEV;
+	}
+
+	while ((c = shell_getopt(shell, argc - 1, &argv[1], "hi:")) != -1) {
+		state = shell_getopt_state_get(shell);
+		switch (c) {
+		case 'i':
+			index = strtoul(state->optarg, NULL, 0);
+			break;
+		case 'h':
+			shell_help(shell);
+			return SHELL_CMD_HELP_PRINTED;
+		case '?':
+			if (state->optopt == 'i') {
+				shell_print(shell, "Option -%c requires an argument.",
+					    state->optopt);
+			} else if (isprint(state->optopt)) {
+				shell_print(shell, "Unknown option `-%c'.", state->optopt);
+			} else {
+				shell_print(shell, "Unknown option character `\\x%x'.",
+					    state->optopt);
+			}
+			return 1;
+		default:
+			break;
+		}
+	}
+
+	if (index < 0) {
+		shell_print(shell, "dev_desc index not assigned");
+		return SHELL_CMD_HELP_PRINTED;
+	}
+
+	ret = i3c_master_send_entdaa(&i3c_shell_desc_tbl[index]);
+	shell_print(shell, "The DA of the target device attached to i3c_shell_desc_tbl[%d] is %s",
+		    index, ret ? "not assigned" : "assigned");
+
+	return ret;
+}
 
 #ifdef CONFIG_I3C_SLAVE_MQUEUE
 int i3c_slave_mqueue_read(const struct device *dev, uint8_t *dest, int budget);
 int i3c_slave_mqueue_write(const struct device *dev, uint8_t *src, int size);
+const struct device *i3c_slave_mqueue_get_controller(const struct device *dev);
 
 static const char smq_xfer_helper[] = "i3c smq <dev> -w <wdata> -r <read length>";
 static int cmd_smq_xfer(const struct shell *shell, size_t argc, char **argv)
@@ -309,7 +361,7 @@ static int cmd_smq_xfer(const struct shell *shell, size_t argc, char **argv)
 
 	dev = device_get_binding(argv[1]);
 	if (!dev) {
-		shell_error(shell, "I3C: Device driver %s not found.", argv[1]);
+		shell_error(shell, "I3C: Device %s not found.", argv[1]);
 		return -ENODEV;
 	}
 
@@ -348,13 +400,282 @@ static int cmd_smq_xfer(const struct shell *shell, size_t argc, char **argv)
 }
 #endif
 
+#define I3C_SHELL_STACK0_SIZE	1024
+#define I3C_SHELL_STACK1_SIZE	1024
+K_KERNEL_STACK_MEMBER(stack0, I3C_SHELL_STACK0_SIZE);
+K_KERNEL_STACK_MEMBER(stack1, I3C_SHELL_STACK1_SIZE);
+
+k_tid_t tid_i3c[2];
+struct k_thread thread[2];
+#define STRESS_DATA_LEN	64
+static const char do_stress_helper[] = "i3c stress <dev> -l <loop count>";
+
+static void i3c_stress_target_thread(void *arg0, void *arg1, void *arg2)
+{
+	const struct device *dev = arg0;
+	const struct device *i3c = i3c_slave_mqueue_get_controller(dev);
+	const struct shell *shell = arg1;
+	int loop_cnt = POINTER_TO_INT(arg2);
+	int ret;
+
+	uint8_t data[STRESS_DATA_LEN], dyn_addr;
+	bool do_forever = !loop_cnt;
+
+	shell_print(shell, "I3C target thread start");
+
+	/* Issue hot-join to request the dynamic address */
+	i3c_slave_hj_req(i3c);
+
+	/* Check whether the dynamic address is assigned by the bus controller */
+	while (i3c_slave_get_dynamic_addr(i3c, &dyn_addr) < 0) {
+		k_msleep(1);
+	}
+
+	shell_print(shell, "Dynamic address: %02x\n", dyn_addr);
+
+	do {
+		while (1) {
+			ret = i3c_slave_mqueue_read(dev, data, STRESS_DATA_LEN);
+			if (ret > 0)
+				break;
+
+			k_msleep(1);
+		}
+
+		shell_hexdump(shell, data, ret);
+
+		i3c_slave_mqueue_write(dev, data, ret);
+
+		if (!do_forever && --loop_cnt == 0) {
+			break;
+		}
+	} while (1);
+
+	k_thread_abort(k_current_get());
+}
+
+static struct i3c_ibi_payload i3c_payload;
+uint8_t test_data_rx[256];
+struct i3c_shell_ibi_data {
+	const struct shell *shell;
+	struct k_work work;
+	struct i3c_dev_desc *dev_desc;
+	struct i3c_ibi_payload payload;
+};
+
+struct i3c_shell_ibi_data i3c_shell_ibi_user_data;
+
+static void i3c_shell_ibi_worker(struct k_work *work)
+{
+	struct i3c_shell_ibi_data *data = CONTAINER_OF(work, struct i3c_shell_ibi_data, work);
+	struct i3c_priv_xfer xfer;
+	uint8_t buf[16];
+
+	/* dump IBI payload data */
+	shell_hexdump(data->shell, data->payload.buf, data->payload.size);
+
+	if (IS_MDB_PENDING_READ_NOTIFY(data->payload.buf[0])) {
+		/* read pending data */
+		xfer.data.in = buf;
+		xfer.len = 16;
+		xfer.rnw = 1;
+		i3c_master_priv_xfer(data->dev_desc, &xfer, 1);
+		shell_hexdump(data->shell, xfer.data.in, xfer.len);
+	}
+}
+
+static struct i3c_ibi_payload *test_ibi_write_requested(struct i3c_dev_desc *desc)
+{
+	i3c_payload.buf = test_data_rx;
+	i3c_payload.size = 0;
+	i3c_payload.max_payload_size = 16;
+
+	return &i3c_payload;
+}
+
+static void test_ibi_write_done(struct i3c_dev_desc *desc)
+{
+	memcpy(&i3c_shell_ibi_user_data.payload, &i3c_payload, sizeof(struct i3c_ibi_payload));
+	k_work_submit(&i3c_shell_ibi_user_data.work);
+}
+
+static struct i3c_ibi_callbacks i3c_ibi_def_callbacks = {
+	.write_requested = test_ibi_write_requested,
+	.write_done = test_ibi_write_done,
+};
+
+static void i3c_stress_daa_thread(void *arg0, void *arg1, void *arg2)
+{
+	const struct device *dev = arg0;
+	const struct shell *shell = arg1;
+	int loop_cnt = POINTER_TO_INT(arg2);
+
+	bool do_forever = !loop_cnt;
+
+	shell_print(shell, "I3C DAA thread start");
+	do {
+		i3c_master_send_aasa(dev);
+		k_msleep(1000);
+
+		if (!do_forever && --loop_cnt == 0) {
+			break;
+		}
+	} while (1);
+
+	k_thread_abort(k_current_get());
+}
+
+static void i3c_stress_main_thread(void *arg0, void *arg1, void *arg2)
+{
+	const struct device *dev = arg0;
+	const struct shell *shell = arg1;
+	int loop_cnt = POINTER_TO_INT(arg2);
+
+	struct i3c_priv_xfer xfer;
+	struct i3c_dev_desc *desc = &i3c_shell_desc_tbl[0];
+	uint8_t data[16];
+	int i;
+	bool do_forever = !loop_cnt;
+
+	if (!desc->bus) {
+		shell_print(shell,
+			    "No device desc attached, please execute: "
+			    "i3c attach %s -a <target address>",
+			    dev->name);
+		return;
+	}
+
+	if (!i3c_shell_ibi_user_data.work.handler) {
+		k_work_init(&i3c_shell_ibi_user_data.work, i3c_shell_ibi_worker);
+	}
+	i3c_shell_ibi_user_data.shell = shell;
+	i3c_shell_ibi_user_data.dev_desc = desc;
+
+	/* Assign dynamic address through SETAASA */
+	desc->info.dynamic_addr = desc->info.static_addr;
+	i3c_master_send_rstdaa(dev);
+	i3c_master_send_aasa(dev);
+	i3c_master_send_getbcr(dev, desc->info.dynamic_addr, &desc->info.bcr);
+	i3c_master_send_getpid(dev, desc->info.dynamic_addr, &desc->info.pid);
+	shell_print(shell, "Got target BCR %02x", desc->info.bcr);
+	shell_print(shell, "Got target PID %llx", desc->info.pid);
+	desc->info.dcr = 0;
+
+	i3c_master_request_ibi(desc, &i3c_ibi_def_callbacks);
+	i3c_master_enable_ibi(desc);
+
+	tid_i3c[1] = k_thread_create(&thread[1], stack1, I3C_SHELL_STACK1_SIZE,
+				 (k_thread_entry_t)i3c_stress_daa_thread, (void *)dev,
+				 (void *)shell, INT_TO_POINTER(loop_cnt), 55, 0, K_FOREVER);
+
+	k_thread_name_set(tid_i3c[1], "i3c_stress_daa");
+	k_thread_start(tid_i3c[1]);
+
+	/* init private write data */
+	for (i = 0; i < 16; i++) {
+		data[i] = i;
+	}
+	xfer.data.out = data;
+	xfer.len = 16;
+	xfer.rnw = 0;
+
+	shell_print(shell, "I3C main thread start");
+	do {
+		i3c_master_priv_xfer(desc, &xfer, 1);
+		k_msleep(1000);
+
+		if (!do_forever && --loop_cnt == 0) {
+			break;
+		}
+	} while (1);
+
+	k_thread_abort(k_current_get());
+}
+
+static int cmd_do_stress(const struct shell *shell, size_t argc, char **argv)
+{
+	const struct device *dev;
+	struct getopt_state *state;
+	int c, target_mode = 0, loop_cnt = 0;
+
+	dev = device_get_binding(argv[1]);
+	if (!dev) {
+		shell_error(shell, "I3C: Device %s not found.", argv[1]);
+		return -ENODEV;
+	}
+
+	if (strstr(dev->name, "SMQ") != NULL) {
+		/*
+		 * if "SMQ" is present in device name, implies the I3C controller operates in
+		 * the target mode
+		 */
+		target_mode = 1;
+	}
+
+	while ((c = shell_getopt(shell, argc - 1, &argv[1], "l:")) != -1) {
+		state = shell_getopt_state_get(shell);
+		switch (c) {
+		case 'l':
+			loop_cnt = strtoul(state->optarg, NULL, 0);
+			break;
+		case 'h':
+			shell_help(shell);
+			return SHELL_CMD_HELP_PRINTED;
+		case '?':
+			if (state->optopt == 'l') {
+				shell_print(shell, "Option -%c requires an argument.",
+					    state->optopt);
+			} else if (isprint(state->optopt)) {
+				shell_print(shell, "Unknown option `-%c'.", state->optopt);
+			} else {
+				shell_print(shell, "Unknown option character `\\x%x'.",
+					    state->optopt);
+			}
+			return 1;
+		default:
+			break;
+		}
+	}
+
+	if (strcmp(k_thread_state_str(&thread[0]), "") == 0 ||
+	    strcmp(k_thread_state_str(&thread[0]), "dead") == 0) {
+		if (target_mode) {
+			tid_i3c[0] = k_thread_create(&thread[0], stack0, I3C_SHELL_STACK0_SIZE,
+						 (k_thread_entry_t)i3c_stress_target_thread,
+						 (void *)dev, (void *)shell,
+						 INT_TO_POINTER(loop_cnt), 55, 0, K_FOREVER);
+		} else {
+			tid_i3c[0] = k_thread_create(&thread[0], stack0, I3C_SHELL_STACK0_SIZE,
+						 (k_thread_entry_t)i3c_stress_main_thread,
+						 (void *)dev, (void *)shell,
+						 INT_TO_POINTER(loop_cnt), 55, 0, K_FOREVER);
+		}
+
+		if (!tid_i3c[0]) {
+			shell_print(shell, "thread creat failed = %d", tid_i3c[0]);
+			return 1;
+		}
+
+		if (target_mode) {
+			k_thread_name_set(tid_i3c[0], "i3c_stress_target");
+		} else {
+			k_thread_name_set(tid_i3c[0], "i3c_stress_main");
+		}
+		k_thread_start(tid_i3c[0]);
+	}
+
+	return 0;
+}
+
 SHELL_STATIC_SUBCMD_SET_CREATE(sub_i3c_cmds,
 	SHELL_CMD(attach, &dsub_device_name, attach_helper, cmd_attach),
 	SHELL_CMD(ccc, &dsub_device_name, send_ccc_helper, cmd_send_ccc),
+	SHELL_CMD(entdaa, &dsub_device_name, entdaa_helper, cmd_entdaa),
 	SHELL_CMD(xfer, &dsub_device_name, priv_xfer_helper, cmd_priv_xfer),
 	SHELL_CMD(hj_req, &dsub_device_name, hj_req_helper, cmd_hj_req),
 #ifdef CONFIG_I3C_SLAVE_MQUEUE
 	SHELL_CMD(smq, &dsub_device_name, smq_xfer_helper, cmd_smq_xfer),
+	SHELL_CMD(stress, &dsub_device_name, do_stress_helper, cmd_do_stress),
 #endif
 	SHELL_SUBCMD_SET_END);
 SHELL_CMD_REGISTER(i3c, &sub_i3c_cmds, "I3C commands", NULL);
diff --git a/drivers/i3c/slave/i3c_slave_mqueue.c b/drivers/i3c/slave/i3c_slave_mqueue.c
index ad511d6740..3074a6c45e 100644
--- a/drivers/i3c/slave/i3c_slave_mqueue.c
+++ b/drivers/i3c/slave/i3c_slave_mqueue.c
@@ -98,6 +98,12 @@ int i3c_slave_mqueue_read(const struct device *dev, uint8_t *dest, int budget)
 	return ret;
 }
 
+const struct device *i3c_slave_mqueue_get_controller(const struct device *dev)
+{
+        struct i3c_slave_mqueue_obj *obj = DEV_DATA(dev);
+        return obj->i3c_controller;
+}
+
 int i3c_slave_mqueue_write(const struct device *dev, uint8_t *src, int size)
 {
 	struct i3c_slave_mqueue_config *config = DEV_CFG(dev);
diff --git a/include/drivers/i3c/i3c.h b/include/drivers/i3c/i3c.h
index 716440a6a0..a9f84f96bf 100644
--- a/include/drivers/i3c/i3c.h
+++ b/include/drivers/i3c/i3c.h
@@ -253,6 +253,7 @@ int i3c_master_send_getbcr(const struct device *master, uint8_t addr, uint8_t *b
 #define i3c_master_priv_xfer		i3c_aspeed_master_priv_xfer
 #define i3c_master_request_ibi		i3c_aspeed_master_request_ibi
 #define i3c_master_enable_ibi		i3c_aspeed_master_enable_ibi
+#define i3c_master_send_entdaa		i3c_aspeed_master_send_entdaa
 #define i3c_slave_register		i3c_aspeed_slave_register
 #define i3c_slave_set_static_addr	i3c_aspeed_slave_set_static_addr
 #define i3c_slave_send_sir		i3c_aspeed_slave_send_sir
-- 
2.25.1

