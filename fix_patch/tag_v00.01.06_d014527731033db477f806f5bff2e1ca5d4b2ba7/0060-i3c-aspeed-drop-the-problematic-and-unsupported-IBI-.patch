From 16d31fce64446b591e4b32db41231d6c947ce402 Mon Sep 17 00:00:00 2001
From: Dylan Hung <dylan_hung@aspeedtech.com>
Date: Wed, 29 Mar 2023 13:20:39 +0800
Subject: [PATCH] i3c: aspeed: drop the problematic and unsupported IBI
 payloads

In I3C bus controller mode, drop the problematic and unsupported IBI
payloads.

Signed-off-by: Dylan Hung <dylan_hung@aspeedtech.com>
Change-Id: Id9bd16804dfd0ef3f34be3f23d493084e8462075
---
 drivers/i3c/i3c_aspeed.c | 27 ++++++++++++++++++++++-----
 1 file changed, 22 insertions(+), 5 deletions(-)

diff --git a/drivers/i3c/i3c_aspeed.c b/drivers/i3c/i3c_aspeed.c
index dad66b7b2f..32e44a1bff 100644
--- a/drivers/i3c/i3c_aspeed.c
+++ b/drivers/i3c/i3c_aspeed.c
@@ -833,8 +833,9 @@ static void i3c_aspeed_master_rx_ibi(struct i3c_aspeed_obj *obj)
 	struct i3c_aspeed_dev_priv *priv;
 	struct i3c_ibi_status ibi_status;
 	struct i3c_ibi_payload *payload;
-	uint32_t i, j, nstatus, nbytes, nwords, pos;
+	uint32_t i, j, nstatus, nbytes, nwords, pos, tmp;
 	uint32_t *dst;
+	bool data_consumed;
 
 	nstatus = i3c_register->queue_status_level.fields.ibi_status_cnt;
 	if (!nstatus) {
@@ -843,19 +844,26 @@ static void i3c_aspeed_master_rx_ibi(struct i3c_aspeed_obj *obj)
 
 	for (i = 0; i < nstatus; i++) {
 		obj->ibi_status_parser(i3c_register->ibi_queue_status.value, &ibi_status);
+		data_consumed = false;
 		if (ibi_status.ibi_status) {
 			LOG_WRN("IBI NACK\n");
+			goto out;
 		}
 
 		if (ibi_status.error) {
 			LOG_ERR("IBI error\n");
+			goto out;
+		}
+
+		if (ibi_status.id == (0x2 << 1)) {
+			LOG_INF("Receive Hot-join event (Not supported for now)\n");
+			goto out;
 		}
 
 		pos = i3c_aspeed_get_pos(obj, ibi_status.id >> 1);
 		if (pos < 0) {
 			LOG_ERR("unregistered IBI source: 0x%x\n", ibi_status.id >> 1);
-			i3c_register->reset_ctrl.fields.ibi_queue_reset = 1;
-			continue;
+			goto out;
 		}
 
 		i3cdev = obj->dev_descs[pos];
@@ -874,10 +882,10 @@ static void i3c_aspeed_master_rx_ibi(struct i3c_aspeed_obj *obj)
 		}
 
 		if (nbytes & 0x3) {
-			uint32_t tmp = i3c_register->ibi_queue_status.value;
-
+			tmp = i3c_register->ibi_queue_status.value;
 			memcpy((uint8_t *)dst + (nbytes & ~0x3), &tmp, nbytes & 3);
 		}
+		data_consumed = true;
 
 		payload->size += nbytes;
 		priv->ibi.incomplete = payload;
@@ -885,6 +893,15 @@ static void i3c_aspeed_master_rx_ibi(struct i3c_aspeed_obj *obj)
 			priv->ibi.callbacks->write_done(priv->ibi.context);
 			priv->ibi.incomplete = NULL;
 		}
+out:
+		if (data_consumed == false) {
+			nbytes = ibi_status.length;
+			/* rounding up the bytes into words */
+			nwords = (nbytes + 3) >> 2;
+			for (j = 0; j < nwords; j++) {
+				tmp = i3c_register->ibi_queue_status.value;
+			}
+		}
 	}
 }
 
-- 
2.25.1

