From 0588453fb32b967fd8ecb1862b42115820a5d278 Mon Sep 17 00:00:00 2001
From: Dylan Hung <dylan_hung@aspeedtech.com>
Date: Fri, 6 Oct 2023 16:27:55 +0800
Subject: [PATCH 05/11] i3c: aspeed: Avoid the bus hang issue when ibi queue
 overflow.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This patch is modified from Aspeed Linux-v5.15 commit #d316a127.
The original commit message is
```
When our i3c controller nack the IBI which isnâ€™t existed in our DAT the
ibi buffer counter (IBI Buffer Status Count) may lose the control.

Consequently, the counter surpasses the tolerance level for the ibi buffer
capability(16). When the controller attempts to read the IBI buffer with a
counter value greater than 16, the CPU will experience a hang due to the
absence of a response from the bus.

This patch will clear the IBI FIFO when the IBI counter exceeds 16, and
the IBI response status receives a NACK, indicating that the controller
received the IBI from an address not included in the hardware DAT.
```

Signed-off-by: Dylan Hung <dylan_hung@aspeedtech.com>
Change-Id: I67c5701dd44a576731de8ae7d6e48fa560d28b6b
---
 drivers/i3c/i3c_aspeed.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/drivers/i3c/i3c_aspeed.c b/drivers/i3c/i3c_aspeed.c
index 6db8432728..75df46d4e5 100644
--- a/drivers/i3c/i3c_aspeed.c
+++ b/drivers/i3c/i3c_aspeed.c
@@ -980,12 +980,17 @@ static void i3c_aspeed_master_rx_ibi(struct i3c_aspeed_obj *obj)
 		return;
 	}
 
+	if (nstatus > 16) {
+		LOG_ERR("The nibi %d surpasses the tolerance level for the IBI buffer", nstatus);
+		goto clear;
+	}
+
 	for (i = 0; i < nstatus; i++) {
 		obj->ibi_status_parser(i3c_register->ibi_queue_status.value, &ibi_status);
 		data_consumed = false;
 		if (ibi_status.ibi_status) {
 			LOG_WRN("IBI NACK\n");
-			goto out;
+			goto clear;
 		}
 
 		if (ibi_status.error) {
@@ -1065,6 +1070,11 @@ out:
 				i3c_aspeed_gen_tbits_low(obj);
 		}
 	}
+	return;
+clear:
+	i3c_aspeed_enter_halt(obj, true);
+	i3c_aspeed_reset_ctrl(obj, I3C_ASPEED_RESET_IBI_QUEUE);
+	i3c_aspeed_exit_halt(obj);
 }
 
 static void i3c_aspeed_slave_event(const struct device *dev, union i3c_intr_s status)
-- 
2.25.1

