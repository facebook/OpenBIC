From c1022a3d2d3cc901cc532566fc393b11cd05b08c Mon Sep 17 00:00:00 2001
From: MouchenHung <Mouchen.Hung@quantatw.com>
Date: Fri, 1 Nov 2024 10:11:43 +0800
Subject: [PATCH] i2c: aspeed: Fix some cases which unhandled by slave irq

---
 drivers/i2c/i2c_aspeed.c | 165 ++++++++++++++++++++++++++++++++-------
 1 file changed, 136 insertions(+), 29 deletions(-)

diff --git a/drivers/i2c/i2c_aspeed.c b/drivers/i2c/i2c_aspeed.c
index d0ca13fbb1..fe78b35446 100644
--- a/drivers/i2c/i2c_aspeed.c
+++ b/drivers/i2c/i2c_aspeed.c
@@ -4,7 +4,7 @@
  * SPDX-License-Identifier: Apache-2.0
  */
 #define DT_DRV_COMPAT aspeed_i2c
-
+#include <drivers/hwinfo.h>
 #include <drivers/clock_control.h>
 #include "soc.h"
 
@@ -790,7 +790,7 @@ static void aspeed_new_i2c_do_start(const struct device *dev)
 			if (xfer_len) {
 				cmd |= AST_I2CM_RX_DMA_EN | AST_I2CM_RX_CMD;
 				sys_write32(AST_I2CM_SET_RX_DMA_LEN(xfer_len - 1), i2c_base + AST_I2CM_DMA_LEN);
-				sys_write32((uint32_t)msg->buf, i2c_base + AST_I2CM_RX_DMA);
+				sys_write32(TO_PHY_ADDR(msg->buf), i2c_base + AST_I2CM_RX_DMA);
 			}
 		} else if (config->mode == BUFF_MODE) {
 			/*buff mode*/
@@ -952,8 +952,8 @@ static int i2c_aspeed_transfer(const struct device *dev, struct i2c_msg *msgs,
 			if (ctrl & AST_I2CC_SLAVE_EN) {
 				if (config->mode == DMA_MODE) {
 					cmd |= AST_I2CS_RX_DMA_EN;
-					sys_write32((uint32_t)data->slave_dma_buf, i2c_base + AST_I2CS_RX_DMA);
-					sys_write32((uint32_t)data->slave_dma_buf, i2c_base + AST_I2CS_TX_DMA);
+					sys_write32(TO_PHY_ADDR(data->slave_dma_buf), i2c_base + AST_I2CS_RX_DMA);
+					sys_write32(TO_PHY_ADDR(data->slave_dma_buf), i2c_base + AST_I2CS_TX_DMA);
 					sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
 					, i2c_base + AST_I2CS_DMA_LEN);
 				} else if (config->mode == BUFF_MODE) {
@@ -1051,7 +1051,7 @@ void do_i2cm_tx(const struct device *dev)
 		, i2c_base + AST_I2CM_DMA_LEN);
 		LOG_DBG("next tx xfer_len: %d, offset %d\n"
 		, xfer_len, data->master_xfer_cnt);
-		sys_write32((uint32_t)(data->msgs->buf + data->master_xfer_cnt)
+		sys_write32((TO_PHY_ADDR(data->msgs->buf) + data->master_xfer_cnt)
 		, i2c_base + AST_I2CM_TX_DMA);
 	} else if (config->mode == BUFF_MODE) {
 		uint8_t wbuf[4];
@@ -1164,7 +1164,7 @@ void do_i2cm_rx(const struct device *dev)
 			, i2c_base + AST_I2CM_DMA_LEN);
 			LOG_DBG("TODO check addr dma addr %x\n"
 			, (uint32_t)msg->buf);
-			sys_write32((uint32_t) (msg->buf + data->master_xfer_cnt)
+			sys_write32((TO_PHY_ADDR(msg->buf) + data->master_xfer_cnt)
 			, i2c_base + AST_I2CM_RX_DMA);
 		} else if (config->mode == BUFF_MODE) {
 			cmd |= AST_I2CM_RX_BUFF_EN;
@@ -1340,19 +1340,14 @@ void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, ui
 	struct i2c_aspeed_data *data = DEV_DATA(dev);
 	const struct i2c_slave_callbacks *slave_cb = data->slave_cfg->callbacks;
 	uint32_t cmd = 0;
-	uint32_t i, slave_rx_len;
-	uint8_t byte_data, value;
-
-	/* clear irq first */
-	sys_write32(AST_I2CS_PKT_DONE, i2c_base + AST_I2CS_ISR);
-	sys_read32(i2c_base + AST_I2CS_ISR);
+	uint32_t i, slave_rx_len = 0;
+	uint8_t byte_data = 0, value = 0;
 
 	sts &= ~(AST_I2CS_PKT_DONE | AST_I2CS_PKT_ERROR);
 
 	switch (sts) {
-	case AST_I2CS_SLAVE_MATCH:
-	case AST_I2CS_SLAVE_MATCH | AST_I2CS_Wait_RX_DMA:
 	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA: /* re-trigger? */
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_Wait_RX_DMA:
 		if (sys_read32(i2c_base + AST_I2CM_ISR)) {
 			LOG_DBG("S : Sw|D - Wait normal\n");
 		} else {
@@ -1360,6 +1355,41 @@ void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, ui
 			if (slave_cb->write_requested) {
 				slave_cb->write_requested(data->slave_cfg);
 			}
+
+			if (config->mode == DMA_MODE) {
+				slave_rx_len =
+				AST_I2C_GET_RX_DMA_LEN(sys_read32(i2c_base + AST_I2CS_DMA_LEN_STS));
+
+				/*aspeed_cache_invalid_data*/
+				cache_data_range((&data->slave_dma_buf[0])
+				, slave_rx_len, K_CACHE_INVD);
+
+				if (slave_cb->write_received) {
+					for (i = 0; i < slave_rx_len; i++) {
+						LOG_DBG("[%02x] ", data->slave_dma_buf[i]);
+						slave_cb->write_received(data->slave_cfg
+						, data->slave_dma_buf[i]);
+					}
+				}
+			} else if (config->mode == BUFF_MODE) {
+				LOG_DBG("Slave_Buff");
+				slave_rx_len =
+				AST_I2CC_GET_RX_BUF_LEN(sys_read32(i2c_base + AST_I2CC_BUFF_CTRL));
+
+				if (slave_cb->write_received) {
+					for (i = 0; i < slave_rx_len ; i++) {
+						slave_cb->write_received(data->slave_cfg
+						, sys_read8(config->buf_base + i));
+					}
+				}
+			} else {
+				byte_data =
+				AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+				LOG_DBG("[%02x]", byte_data);
+				if (slave_cb->write_received) {
+					slave_cb->write_received(data->slave_cfg, byte_data);
+				}
+			}
 			aspeed_i2c_trigger_package_cmd(i2c_base, config->mode);
 		}
 		break;
@@ -1368,15 +1398,17 @@ void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, ui
 		if (slave_cb->stop) {
 			slave_cb->stop(data->slave_cfg);
 		}
+		sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
+		, i2c_base + AST_I2CS_DMA_LEN);
 		aspeed_i2c_trigger_package_cmd(i2c_base, config->mode);
 		break;
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE_NAK | AST_I2CS_RX_DONE | AST_I2CS_STOP:
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_Wait_RX_DMA | AST_I2CS_RX_DONE | AST_I2CS_STOP:
+	case AST_I2CS_RX_DONE_NAK | AST_I2CS_RX_DONE | AST_I2CS_STOP:
+	case AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP:
 	case AST_I2CS_RX_DONE | AST_I2CS_STOP:
 	case AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA: /* wait for last package received data done */
-	case AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP:
-	case AST_I2CS_RX_DONE_NAK | AST_I2CS_RX_DONE | AST_I2CS_STOP:
 	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_STOP:
-	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP:
-	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE_NAK | AST_I2CS_RX_DONE | AST_I2CS_STOP:
 		if (sts & AST_I2CS_STOP) {
 			if (sts & AST_I2CS_SLAVE_MATCH) {
 				LOG_DBG("S : Sw|D|P\n");
@@ -1403,11 +1435,14 @@ void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, ui
 
 			if (slave_cb->write_received) {
 				for (i = 0; i < slave_rx_len; i++) {
-					/*LOG_DBG(data->dev, "[%02x]", data->slave_dma_buf[i]);*/
+					LOG_DBG("[%02x] ", data->slave_dma_buf[i]);
 					slave_cb->write_received(data->slave_cfg
 					, data->slave_dma_buf[i]);
 				}
 			}
+
+			sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
+			, i2c_base + AST_I2CS_DMA_LEN);
 		} else if (config->mode == BUFF_MODE) {
 			LOG_DBG("Slave_Buff");
 			slave_rx_len =
@@ -1473,8 +1508,6 @@ void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, ui
 			LOG_DBG("tx [%02x]", data->slave_dma_buf[0]);
 
 			sys_write32(0, i2c_base + AST_I2CS_DMA_LEN_STS);
-			sys_write32((uint32_t)data->slave_dma_buf
-			, i2c_base + AST_I2CS_TX_DMA);
 			sys_write32(AST_I2CS_SET_TX_DMA_LEN(1)
 			, i2c_base + AST_I2CS_DMA_LEN);
 		} else if (config->mode == BUFF_MODE) {
@@ -1588,9 +1621,6 @@ void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, ui
 
 	case AST_I2CS_TX_NAK | AST_I2CS_STOP:
 		LOG_DBG("S: AST_I2CS_TX_NAK\n");
-	case AST_I2CS_STOP:
-		/*it just tx complete*/
-		LOG_DBG("S: AST_I2CS_STOP\n");
 		cmd = SLAVE_TRIGGER_CMD;
 		if (slave_cb->stop) {
 			slave_cb->stop(data->slave_cfg);
@@ -1610,11 +1640,80 @@ void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, ui
 		sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
 		break;
 
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP | AST_I2CS_TX_NAK:
+		LOG_DBG("S: AST_I2CS_TX_NAK\n");
+		if (slave_cb->stop) {
+			slave_cb->stop(data->slave_cfg);
+		}
+		if (sys_read32(i2c_base + AST_I2CM_ISR)) {
+			LOG_DBG("S : Sw|D - Wait normal\n");
+		} else {
+			LOG_DBG("S : Sw|D - Issue rx dma\n");
+			if (slave_cb->write_requested) {
+				slave_cb->write_requested(data->slave_cfg);
+			}
+
+			if (config->mode == DMA_MODE) {
+				slave_rx_len =
+				AST_I2C_GET_RX_DMA_LEN(sys_read32(i2c_base + AST_I2CS_DMA_LEN_STS));
+
+				/*aspeed_cache_invalid_data*/
+				cache_data_range((&data->slave_dma_buf[0])
+				, slave_rx_len, K_CACHE_INVD);
+
+				if (slave_cb->write_received) {
+					for (i = 0; i < slave_rx_len; i++) {
+						LOG_DBG("[%02x] ", data->slave_dma_buf[i]);
+						slave_cb->write_received(data->slave_cfg
+						, data->slave_dma_buf[i]);
+					}
+				}
+			} else if (config->mode == BUFF_MODE) {
+				LOG_DBG("Slave_Buff");
+				slave_rx_len =
+				AST_I2CC_GET_RX_BUF_LEN(sys_read32(i2c_base + AST_I2CC_BUFF_CTRL));
+
+				if (slave_cb->write_received) {
+					for (i = 0; i < slave_rx_len ; i++) {
+						slave_cb->write_received(data->slave_cfg
+						, sys_read8(config->buf_base + i));
+					}
+				}
+			} else {
+				byte_data =
+				AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+				LOG_DBG("[%02x]", byte_data);
+				if (slave_cb->write_received) {
+					slave_cb->write_received(data->slave_cfg, byte_data);
+				}
+			}
+			aspeed_i2c_trigger_package_cmd(i2c_base, config->mode);
+		}
+		break;
+
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE:
+		if (slave_cb->write_requested) {
+			slave_cb->write_requested(data->slave_cfg);
+		}
+		break;
+
+	case AST_I2CS_STOP:
+		/*it just tx complete*/
+		LOG_DBG("S: AST_I2CS_STOP\n");
+		if (slave_cb->stop) {
+			slave_cb->stop(data->slave_cfg);
+		}
+		break;
+
 	default:
 		LOG_DBG("TODO slave sts case %x, now %x\n"
 		, sts, sys_read32(i2c_base + AST_I2CS_ISR));
 		break;
 	}
+
+	/* clear irq first */
+	sys_write32(AST_I2CS_PKT_DONE, i2c_base + AST_I2CS_ISR);
+	sys_read32(i2c_base + AST_I2CS_ISR);
 }
 
 void aspeed_i2c_slave_byte_irq(const struct device *dev, uint32_t i2c_base, uint32_t sts)
@@ -1828,6 +1927,8 @@ static int i2c_aspeed_init(const struct device *dev)
 	uint32_t i2c_base_offset = I2C_BUF_BASE + (i2c_count * 0x20);
 	uint32_t bitrate_cfg;
 	int error;
+	uint64_t rev_id;
+    size_t len;
 
 	k_sem_init(&data->sync_sem, 0, UINT_MAX);
 
@@ -1845,6 +1946,9 @@ static int i2c_aspeed_init(const struct device *dev)
 	/* byte mode check re-start */
 	data->slave_addr_last = 0xFF;
 
+	/* check chip id*/
+    len = hwinfo_get_device_id((uint8_t *)&rev_id, sizeof(rev_id));
+
 	clock_control_get_rate(config->clock_dev, config->clk_id, &config->clk_src);
 	LOG_DBG("clk src %d, div mode %d, multi-master %d, xfer mode %d\n",
 		config->clk_src, config->clk_div_mode, config->multi_master, config->mode);
@@ -1881,15 +1985,16 @@ static int i2c_aspeed_slave_register(const struct device *dev,
 
 	LOG_DBG(" [%x]\n", config->address);
 
-	/*Set slave addr.*/
+	/* set slave addr. */
 	sys_write32(config->address |
 		    (sys_read32(i2c_base + AST_I2CS_ADDR_CTRL) & ~AST_I2CS_ADDR1_MASK),
 		    i2c_base + AST_I2CS_ADDR_CTRL);
 
-	/*trigger rx buffer*/
+	/* trigger rx buffer */
 	if (i2c_config->mode == DMA_MODE) {
 		cmd |= AST_I2CS_RX_DMA_EN;
-		sys_write32((uint32_t)data->slave_dma_buf, i2c_base + AST_I2CS_RX_DMA);
+		sys_write32(TO_PHY_ADDR(data->slave_dma_buf), i2c_base + AST_I2CS_TX_DMA);
+		sys_write32(TO_PHY_ADDR(data->slave_dma_buf), i2c_base + AST_I2CS_RX_DMA);
 		sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE), i2c_base + AST_I2CS_DMA_LEN);
 	} else if (i2c_config->mode == BUFF_MODE) {
 		cmd |= AST_I2CS_RX_BUFF_EN;
@@ -1898,10 +2003,12 @@ static int i2c_aspeed_slave_register(const struct device *dev,
 		cmd &= ~AST_I2CS_PKT_MODE_EN;
 	}
 
-	sys_write32(AST_I2CS_AUTO_NAK_EN, i2c_base + AST_I2CS_CMD_STS);
+	/* apply slave device setting */
+	sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
+
+	/* enable slave device */
 	sys_write32(AST_I2CC_SLAVE_EN | sys_read32(i2c_base + AST_I2CC_FUN_CTRL)
 	, i2c_base + AST_I2CC_FUN_CTRL);
-	sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
 
 	data->slave_attached = true;
 
-- 
2.17.1

