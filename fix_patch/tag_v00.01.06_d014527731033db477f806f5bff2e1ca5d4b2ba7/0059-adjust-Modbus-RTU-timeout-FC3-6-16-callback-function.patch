From aa4d3183049a076ad53bc880a2e9658126ee8ee8 Mon Sep 17 00:00:00 2001
From: matt <matt.lin@quantatw.com>
Date: Mon, 1 Apr 2024 10:53:10 +0800
Subject: [PATCH] adjust Modbus RTU timeout & FC3&6&16 callback function

---
 include/modbus/modbus.h       | 4 ++--
 subsys/modbus/modbus_serial.c | 2 +-
 subsys/modbus/modbus_server.c | 8 ++++----
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/include/modbus/modbus.h b/include/modbus/modbus.h
index 400dc8b9d9..38343b09d8 100644
--- a/include/modbus/modbus.h
+++ b/include/modbus/modbus.h
@@ -348,10 +348,10 @@ struct modbus_user_callbacks {
 	int (*input_reg_rd_fp)(uint16_t addr, float *reg);
 
 	/** Holding Register read callback */
-	int (*holding_reg_rd)(uint16_t addr, uint16_t *reg);
+	int (*holding_reg_rd)(uint16_t addr, uint16_t *reg, uint16_t reg_qty);
 
 	/** Holding Register write callback */
-	int (*holding_reg_wr)(uint16_t addr, uint16_t reg);
+	int (*holding_reg_wr)(uint16_t addr, uint16_t reg, uint16_t reg_qty);
 
 	/** Floating Point Holding Register read callback */
 	int (*holding_reg_rd_fp)(uint16_t addr, float *reg);
diff --git a/subsys/modbus/modbus_serial.c b/subsys/modbus/modbus_serial.c
index 06e44bd241..09b116bc27 100644
--- a/subsys/modbus/modbus_serial.c
+++ b/subsys/modbus/modbus_serial.c
@@ -577,7 +577,7 @@ int modbus_serial_init(struct modbus_context *ctx,
 	}
 
 	if (param.serial.baud <= 38400) {
-		cfg->rtu_timeout = (numof_bits * if_delay_max) /
+		cfg->rtu_timeout = (numof_bits * if_delay_max) * 4 /
 				   param.serial.baud;
 	} else {
 		cfg->rtu_timeout = (numof_bits * if_delay_max) / 38400;
diff --git a/subsys/modbus/modbus_server.c b/subsys/modbus/modbus_server.c
index bd0addac35..6a8b0710f9 100644
--- a/subsys/modbus/modbus_server.c
+++ b/subsys/modbus/modbus_server.c
@@ -363,12 +363,12 @@ static bool mbs_fc03_hreg_read(struct modbus_context *ctx)
 	/* Reset the pointer to the start of the response payload */
 	presp = &ctx->tx_adu.data[1];
 	/* Loop through each register requested. */
-	while (reg_qty > 0) {
+	for (uint16_t reg_cntr = 0; reg_cntr < reg_qty; reg_cntr++) {
 		if (reg_addr < MODBUS_FP_EXTENSIONS_ADDR) {
 			uint16_t reg;
 
 			/* Read integer register */
-			err = ctx->mbs_user_cb->holding_reg_rd(reg_addr, &reg);
+			err = ctx->mbs_user_cb->holding_reg_rd(reg_addr, &reg, reg_qty);
 			if (err == 0) {
 				sys_put_be16(reg, presp);
 				presp += sizeof(uint16_t);
@@ -604,7 +604,7 @@ static bool mbs_fc06_hreg_write(struct modbus_context *ctx)
 	reg_addr = sys_get_be16(&ctx->rx_adu.data[0]);
 	reg_val = sys_get_be16(&ctx->rx_adu.data[2]);
 
-	err = ctx->mbs_user_cb->holding_reg_wr(reg_addr, reg_val);
+	err = ctx->mbs_user_cb->holding_reg_wr(reg_addr, reg_val, 1);
 
 	if (err != 0) {
 		LOG_INF("Register address not supported");
@@ -900,7 +900,7 @@ static bool mbs_fc16_hregs_write(struct modbus_context *ctx)
 			uint16_t reg_val = sys_get_be16(prx_data);
 
 			prx_data += sizeof(uint16_t);
-			err = ctx->mbs_user_cb->holding_reg_wr(addr, reg_val);
+			err = ctx->mbs_user_cb->holding_reg_wr(addr, reg_val, reg_qty);
 		} else {
 			uint32_t reg_val = sys_get_be32(prx_data);
 			float fp;
-- 
2.43.0

