From 0f508e9e127f4ebf3563cea6f1fade0aa02f6a6b Mon Sep 17 00:00:00 2001
From: Zane Li <zane.li.wiwynn@gmail.com>
Date: Thu, 6 Mar 2025 11:33:31 +0800
Subject: [PATCH] Subject: [PATCH] i2c: aspeed: Fix some cases which unhandled
 by slave irq

---
 drivers/i2c/i2c_aspeed.c | 51 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 51 insertions(+)

diff --git a/drivers/i2c/i2c_aspeed.c b/drivers/i2c/i2c_aspeed.c
index 0c53e3eb9ca..94b7a4ff8c6 100644
--- a/drivers/i2c/i2c_aspeed.c
+++ b/drivers/i2c/i2c_aspeed.c
@@ -1473,6 +1473,57 @@ void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, ui
 		sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
 		break;
 
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP | AST_I2CS_TX_NAK:
+		LOG_DBG("S: AST_I2CS_TX_NAK\n");
+		if (slave_cb->stop) {
+			slave_cb->stop(data->slave_cfg);
+		}
+		if (sys_read32(i2c_base + AST_I2CM_ISR)) {
+			LOG_DBG("S : Sw|D - Wait normal\n");
+		} else {
+			LOG_DBG("S : Sw|D - Issue rx dma\n");
+			if (slave_cb->write_requested) {
+				slave_cb->write_requested(data->slave_cfg);
+			}
+
+			if (config->mode == DMA_MODE) {
+				slave_rx_len =
+				AST_I2C_GET_RX_DMA_LEN(sys_read32(i2c_base + AST_I2CS_DMA_LEN_STS));
+
+				/*aspeed_cache_invalid_data*/
+				cache_data_range((&data->slave_dma_buf[0])
+				, slave_rx_len, K_CACHE_INVD);
+
+				if (slave_cb->write_received) {
+					for (i = 0; i < slave_rx_len; i++) {
+						LOG_DBG("[%02x] ", data->slave_dma_buf[i]);
+						slave_cb->write_received(data->slave_cfg
+						, data->slave_dma_buf[i]);
+					}
+				}
+			} else if (config->mode == BUFF_MODE) {
+				LOG_DBG("Slave_Buff");
+				slave_rx_len =
+				AST_I2CC_GET_RX_BUF_LEN(sys_read32(i2c_base + AST_I2CC_BUFF_CTRL));
+
+				if (slave_cb->write_received) {
+					for (i = 0; i < slave_rx_len ; i++) {
+						slave_cb->write_received(data->slave_cfg
+						, sys_read8(config->buf_base + i));
+					}
+				}
+			} else {
+				byte_data =
+				AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+				LOG_DBG("[%02x]", byte_data);
+				if (slave_cb->write_received) {
+					slave_cb->write_received(data->slave_cfg, byte_data);
+				}
+			}
+			aspeed_i2c_trigger_package_cmd(i2c_base, config->mode);
+		}
+		break;
+
 	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE:
 		if (slave_cb->write_requested) {
 			slave_cb->write_requested(slave_cfg);
-- 
2.25.1

