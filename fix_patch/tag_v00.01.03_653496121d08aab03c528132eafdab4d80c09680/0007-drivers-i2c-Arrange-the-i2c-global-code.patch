From 54b9c191f8d5b26dbfa06dc044efef17d4d082d7 Mon Sep 17 00:00:00 2001
From: tommy-huang <tommy_huang@aspeedtech.com>
Date: Thu, 9 Dec 2021 10:50:36 +0800
Subject: [PATCH 07/18] drivers: i2c: Arrange the i2c global code

Remove unnessary regiter define
Arrange global code and add define

Signed-off-by: tommy-huang <tommy_huang@aspeedtech.com>
Change-Id: Iea21515776d7e84a96ed8844f1b98196350429fb
---
 drivers/i2c/i2c_aspeed.c        | 55 ++++++++++++---------------------
 drivers/i2c/i2c_global_aspeed.c | 20 ++++++++++--
 2 files changed, 36 insertions(+), 39 deletions(-)

diff --git a/drivers/i2c/i2c_aspeed.c b/drivers/i2c/i2c_aspeed.c
index 5cdfb789c0..0ac9026f58 100644
--- a/drivers/i2c/i2c_aspeed.c
+++ b/drivers/i2c/i2c_aspeed.c
@@ -20,36 +20,17 @@ LOG_MODULE_REGISTER(i2c_aspeed);
 
 #include "i2c-priv.h"
 
-#define I2C_SLAVE_BUF_SIZE      256
+#define I2C_SLAVE_BUF_SIZE		256
 
-#define I2C_BUF_SIZE            0x20
-#define I2C_BUF_BASE            0xC00
+#define I2C_BUF_SIZE			0x20
+#define I2C_BUF_BASE			0xC00
 
-/***************************************************************************/
-#define ASPEED_I2CG_ISR                         0x00
-#define ASPEED_I2CG_SLAVE_ISR           0x04    /* ast2600 */
-#define ASPEED_I2CG_OWNER                       0x08
-#define ASPEED_I2CG_CTRL                        0x0C
-#define ASPEED_I2CG_CLK_DIV_CTRL        0x10    /* ast2600 */
-
-#define ASPEED_I2CG_MBX_FIFO_ADDR       0x14    /* ast1060 */
-
-/* 0x0C : I2CG SRAM Buffer Enable  */
-#define ASPEED_I2CG_SRAM_BUFFER_ENABLE          BIT(0)
-
-/*ast2600 */
-#define ASPEED_I2CG_SLAVE_PKT_NAK               BIT(4)
-#define ASPEED_I2CG_M_S_SEPARATE_INTR   BIT(3)
-#define ASPEED_I2CG_CTRL_NEW_REG                BIT(2)
-#define ASPEED_I2CG_CTRL_NEW_CLK_DIV    BIT(1)
-
-/* ASPEED_I2CG_MBX_FIFO_ADDR	0x14	ast1060 FIFO register */
-#define AST_I2CG_FIFO_ADDR_MASK                 0xffff
-#define AST_I2CG_FIFO_SIZE(x)                   (x << 16)
-
-/***************************************************************************/
+/* i2c global */
+#define ASPEED_I2CG_CLK_DIV		0x10
+#define ASPEED_I2CG_CONTROL		0x0C
+#define ASPEED_I2CG_NEW_CLK_BIT	BIT(1)
 
-/* AST2600 reg */
+/* i2c control reg */
 /* 0x00 : I2CC Master/Slave Function Control Register  */
 #define AST_I2CC_FUN_CTRL                       0x00
 #define AST_I2CC_SLAVE_MAILBOX_EN               BIT(24)
@@ -176,7 +157,7 @@ LOG_MODULE_REGISTER(i2c_aspeed);
 #define AST_I2CS_ISR                    0x24
 
 #define AST_I2CS_ADDR_INDICAT_MASK      (3 << 30)
-#define AST_I2CS_Wait_DMA_Process   BIT(29)
+#define AST_I2CS_SLAVE_PENDING   BIT(29)
 
 #define AST_I2CS_Wait_TX_DMA            BIT(25)
 #define AST_I2CS_Wait_RX_DMA            BIT(24)
@@ -507,7 +488,7 @@ static uint32_t i2c_aspeed_select_clock(const struct device *dev)
 
 	/*LOG_DBG("clk src %d, targe %d\n", config->clk_src, data->bus_frequency);*/
 	if (config->clk_div_mode) {
-		clk_div_reg = sys_read32(config->global_reg + ASPEED_I2CG_CLK_DIV_CTRL);
+		clk_div_reg = sys_read32(config->global_reg + ASPEED_I2CG_CLK_DIV);
 		base_clk4 = (config->clk_src * 10) /
 		(((((clk_div_reg >> 24) & 0xff) + 2) * 10) / 2);
 
@@ -1218,12 +1199,18 @@ int aspeed_i2c_slave_irq(const struct device *dev)
 	uint32_t cmd = 0;
 	int ret = 0;
 	int i = 0;
+	uint32_t ier = sys_read32(i2c_base + AST_I2CS_IER);
 	uint32_t sts = sys_read32(i2c_base + AST_I2CS_ISR);
 	uint8_t byte_data = 0;
 	int slave_rx_len = 0;
 	uint8_t value;
 
-	LOG_DBG("S sts %x\n", sts);
+	/* return without necessary slave interrupt */
+	if (!(sts & ier)) {
+		return 0;
+	}
+
+	LOG_DBG("S irq sts %x, bus %x\n", sts, sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
 
 	if ((config->mode == DMA_MODE) || (config->mode == BUFF_MODE)) {
 		if (!(sts & AST_I2CS_PKT_DONE)) {
@@ -1231,10 +1218,6 @@ int aspeed_i2c_slave_irq(const struct device *dev)
 		}
 	}
 
-	if (!sts) {
-		return 0;
-	}
-
 	sts &= ~AST_I2CS_ADDR_INDICAT_MASK;
 
 	if (AST_I2CS_ADDR1_NAK & sts) {
@@ -1254,7 +1237,7 @@ int aspeed_i2c_slave_irq(const struct device *dev)
 	}
 
 	if (AST_I2CS_PKT_DONE & sts) {
-		sts &= ~(AST_I2CS_PKT_DONE | AST_I2CS_PKT_ERROR | AST_I2CS_Wait_DMA_Process);
+		sts &= ~(AST_I2CS_PKT_DONE | AST_I2CS_PKT_ERROR | AST_I2CS_SLAVE_PENDING);
 		sys_write32(AST_I2CS_PKT_DONE, i2c_base + AST_I2CS_ISR);
 
 		switch (sts) {
@@ -1708,7 +1691,7 @@ static int i2c_aspeed_init(const struct device *dev)
 	config->global_reg = i2c_base & 0xfffff000;
 
 	/*get global control register*/
-	if (sys_read32(config->global_reg + ASPEED_I2CG_CTRL) & ASPEED_I2CG_CTRL_NEW_CLK_DIV) {
+	if (sys_read32(config->global_reg + ASPEED_I2CG_CONTROL) & ASPEED_I2CG_NEW_CLK_BIT) {
 		config->clk_div_mode = 1;
 	}
 
diff --git a/drivers/i2c/i2c_global_aspeed.c b/drivers/i2c/i2c_global_aspeed.c
index 77903a9492..307fe3a11b 100644
--- a/drivers/i2c/i2c_global_aspeed.c
+++ b/drivers/i2c/i2c_global_aspeed.c
@@ -18,6 +18,19 @@ LOG_MODULE_REGISTER(i2c_global);
 #include <sys/sys_io.h>
 #include <device.h>
 
+#define ASPEED_I2CG_CONTROL		0x0C
+#define ASPEED_I2CG_NEW_CLK_DIV	0x10
+
+#define CLK_NEW_MODE		BIT(1)
+#define REG_NEW_MODE		BIT(2)
+#define ISSUE_NAK_EMPTY	BIT(4)
+
+#define I2CG_SET	(CLK_NEW_MODE |\
+			REG_NEW_MODE |\
+			ISSUE_NAK_EMPTY)
+
+#define CLK_DIV		0x03020100
+
 /* Device config */
 struct i2c_global_config {
 	uintptr_t base; /* i2c controller base address */
@@ -37,14 +50,15 @@ static int i2c_global_init(const struct device *dev)
 
 	const struct device *reset_dev = device_get_binding(ASPEED_RST_CTRL_NAME);
 
+	/* i2c controller reset / de-reset (delay is necessary) */
 	reset_control_assert(reset_dev, DEV_CFG(dev)->rst_id);
 	k_msleep(1);
 	reset_control_deassert(reset_dev, DEV_CFG(dev)->rst_id);
 	k_msleep(1);
 
-	/* TODO check delay */
-	sys_write32(0x16, i2c_global_base + 0x0C);
-	sys_write32(0x03020100, i2c_global_base + 0x10);
+	/* set i2c global setting */
+	sys_write32(I2CG_SET, i2c_global_base + ASPEED_I2CG_CONTROL);
+	sys_write32(CLK_DIV, i2c_global_base + ASPEED_I2CG_NEW_CLK_DIV);
 
 	return 0;
 }
-- 
2.17.1

