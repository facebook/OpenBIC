From 56e1383b41e7d35038e922c6d0ebae2870461937 Mon Sep 17 00:00:00 2001
From: Tommy Haung <tommy_huang@aspeedtech.com>
Date: Thu, 16 Dec 2021 10:36:37 +0800
Subject: [PATCH 14/18] drivers: i2c: Update i2c slave irq

Redine and collect the i2c slave irq stage code.

Signed-off-by: Tommy Haung <tommy_huang@aspeedtech.com>
Change-Id: I823f70f53af11052d0a2e5c8b62e54587f53e638
---
 drivers/i2c/i2c_aspeed.c | 776 ++++++++++++++++++---------------------
 1 file changed, 366 insertions(+), 410 deletions(-)

diff --git a/drivers/i2c/i2c_aspeed.c b/drivers/i2c/i2c_aspeed.c
index e45c1e892a..8192e974d4 100644
--- a/drivers/i2c/i2c_aspeed.c
+++ b/drivers/i2c/i2c_aspeed.c
@@ -246,6 +246,7 @@ LOG_MODULE_REGISTER(i2c_aspeed);
 /***************************************************************************/
 #define ASPEED_I2C_DMA_SIZE		4096
 /***************************************************************************/
+#define SLAVE_TRIGGER_CMD		(AST_I2CS_ACTIVE_ALL | AST_I2CS_PKT_MODE_EN)
 
 #define DEV_CFG(dev) \
 	((struct i2c_aspeed_config *)(dev)->config)
@@ -1239,474 +1240,429 @@ int aspeed_i2c_master_irq(const struct device *dev)
 }
 
 #ifdef CONFIG_I2C_SLAVE
-int aspeed_i2c_slave_irq(const struct device *dev)
+static inline void aspeed_i2c_trigger_package_cmd(uint32_t i2c_base, uint8_t mode)
+{
+	uint32_t cmd = SLAVE_TRIGGER_CMD;
+
+	cmd = SLAVE_TRIGGER_CMD;
+	if (mode == DMA_MODE) {
+		cmd |= AST_I2CS_RX_DMA_EN;
+		sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
+		, i2c_base + AST_I2CS_DMA_LEN);
+	} else if (mode == BUFF_MODE) {
+		cmd |= AST_I2CS_RX_BUFF_EN;
+		sys_write32(AST_I2CC_SET_RX_BUF_LEN(I2C_BUF_SIZE)
+		, i2c_base + AST_I2CC_BUFF_CTRL);
+	} else {
+		cmd &= ~AST_I2CS_PKT_MODE_EN;
+	}
+	sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
+}
+
+void aspeed_i2c_slave_packet_irq(const struct device *dev, uint32_t i2c_base, uint32_t sts)
 {
 	struct i2c_aspeed_config *config = DEV_CFG(dev);
-	uint32_t i2c_base = DEV_BASE(dev);
 	struct i2c_aspeed_data *data = DEV_DATA(dev);
 	const struct i2c_slave_callbacks *slave_cb = data->slave_cfg->callbacks;
 	uint32_t cmd = 0;
-	int ret = 0;
-	int i = 0;
-	uint32_t ier = sys_read32(i2c_base + AST_I2CS_IER);
-	uint32_t sts = sys_read32(i2c_base + AST_I2CS_ISR);
-	uint8_t byte_data = 0;
-	int slave_rx_len = 0;
-	uint8_t value;
+	uint32_t i, slave_rx_len;
+	uint8_t byte_data, value;
 
-	/* return without necessary slave interrupt */
-	if (!(sts & ier)) {
-		return 0;
-	}
+	/* clear irq first */
+	sys_write32(AST_I2CS_PKT_DONE, i2c_base + AST_I2CS_ISR);
 
-	LOG_DBG("S irq sts %x, bus %x\n", sts, sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+	sts &= ~(AST_I2CS_PKT_DONE | AST_I2CS_PKT_ERROR);
 
-	if ((config->mode == DMA_MODE) || (config->mode == BUFF_MODE)) {
-		if (!(sts & AST_I2CS_PKT_DONE)) {
-			return 0;
+	switch (sts) {
+	case AST_I2CS_SLAVE_MATCH:
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_Wait_RX_DMA:
+		if (sys_read32(i2c_base + AST_I2CM_ISR)) {
+			LOG_DBG("S : Sw|D - Wait normal\n");
+		} else {
+			LOG_DBG("S : Sw|D - Issue rx dma\n");
+			if (slave_cb->write_requested) {
+				slave_cb->write_requested(data->slave_cfg);
+			}
+			aspeed_i2c_trigger_package_cmd(i2c_base, config->mode);
+		}
+		break;
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_STOP:
+		LOG_DBG("S : Sw | P\n");
+		if (slave_cb->stop) {
+			slave_cb->stop(data->slave_cfg);
+		}
+		aspeed_i2c_trigger_package_cmd(i2c_base, config->mode);
+		break;
+	case AST_I2CS_RX_DONE | AST_I2CS_STOP:
+	case AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP:
+	case AST_I2CS_RX_DONE_NAK | AST_I2CS_RX_DONE | AST_I2CS_STOP:
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_STOP:
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA: /* re-trigger? */
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP:
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE_NAK | AST_I2CS_RX_DONE | AST_I2CS_STOP:
+		cmd = SLAVE_TRIGGER_CMD;
+		if (sts & AST_I2CS_STOP) {
+			if (sts & AST_I2CS_SLAVE_MATCH) {
+				LOG_DBG("S : Sw|D|P\n");
+			} else {
+				LOG_DBG("S : D|P\n");
+			}
+		} else {
+			LOG_DBG("S : Sw|D\n");
 		}
-	}
-
-	sts &= ~AST_I2CS_ADDR_INDICAT_MASK;
-
-	if (AST_I2CS_ADDR1_NAK & sts) {
-		sts &= ~AST_I2CS_ADDR1_NAK;
-	}
-
-	if (AST_I2CS_ADDR2_NAK & sts) {
-		sts &= ~AST_I2CS_ADDR2_NAK;
-	}
-
-	if (AST_I2CS_ADDR3_NAK & sts) {
-		sts &= ~AST_I2CS_ADDR3_NAK;
-	}
-
-	if (AST_I2CS_ADDR_MASK & sts) {
-		sts &= ~AST_I2CS_ADDR_MASK;
-	}
 
-	if (AST_I2CS_PKT_DONE & sts) {
-		sts &= ~(AST_I2CS_PKT_DONE | AST_I2CS_PKT_ERROR | AST_I2CS_SLAVE_PENDING);
-		sys_write32(AST_I2CS_PKT_DONE, i2c_base + AST_I2CS_ISR);
+		if (sts & AST_I2CS_SLAVE_MATCH) {
+			if (slave_cb->write_requested) {
+				slave_cb->write_requested(data->slave_cfg);
+			}
+		}
 
-		switch (sts) {
-		case AST_I2CS_SLAVE_MATCH:
-			if (sys_read32(i2c_base + AST_I2CM_ISR)) {
-				LOG_DBG("S : Sw|D - Wait normal\n");
-			} else {
-				LOG_DBG("S : Sw|D - Issue rx dma\n");
-				if (slave_cb->write_requested) {
-					slave_cb->write_requested(data->slave_cfg);
+		if (config->mode == DMA_MODE) {
+			cmd |= AST_I2CS_RX_DMA_EN;
+			slave_rx_len =
+			AST_I2C_GET_RX_DMA_LEN(sys_read32(i2c_base + AST_I2CS_DMA_LEN_STS));
+			/*aspeed_cache_invalid_data*/
+			cache_data_range((&data->slave_dma_buf[0])
+			, slave_rx_len, K_CACHE_INVD);
+			for (i = 0; i < slave_rx_len; i++) {
+			/*LOG_DBG(data->dev, "[%02x]", data->slave_dma_buf[i]);*/
+				if (slave_cb->write_received) {
+					slave_cb->write_received(data->slave_cfg
+					, data->slave_dma_buf[i]);
 				}
-				cmd = AST_I2CS_ACTIVE_ALL | AST_I2CS_PKT_MODE_EN;
-				if (config->mode == DMA_MODE) {
-					cmd |= AST_I2CS_RX_DMA_EN;
-					sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
-					, i2c_base + AST_I2CS_DMA_LEN);
-				} else if (config->mode == BUFF_MODE) {
-					cmd |= AST_I2CS_RX_BUFF_EN;
-					sys_write32(AST_I2CC_SET_RX_BUF_LEN(I2C_BUF_SIZE)
-					, i2c_base + AST_I2CC_BUFF_CTRL);
-				} else {
-					cmd &= ~AST_I2CS_PKT_MODE_EN;
+			}
+			sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
+			, i2c_base + AST_I2CS_DMA_LEN);
+		} else if (config->mode == BUFF_MODE) {
+			LOG_DBG("Slave_Buff");
+			cmd |= AST_I2CS_RX_BUFF_EN;
+			slave_rx_len =
+			AST_I2CC_GET_RX_BUF_LEN(sys_read32(i2c_base + AST_I2CC_BUFF_CTRL));
+			if (slave_cb->write_received) {
+				for (i = 0; i < slave_rx_len ; i++) {
+					slave_cb->write_received(data->slave_cfg
+					, sys_read8(config->buf_base + i));
 				}
-				sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
 			}
-			break;
-		case AST_I2CS_SLAVE_MATCH | AST_I2CS_STOP:
-			LOG_DBG("S : Sw | P\n");
+
+			sys_write32(AST_I2CC_SET_RX_BUF_LEN(config->buf_size)
+			, i2c_base + AST_I2CC_BUFF_CTRL);
+		} else {
+			cmd &= ~AST_I2CS_PKT_MODE_EN;
+			byte_data =
+			AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+			LOG_DBG("[%02x]", byte_data);
+			if (slave_cb->write_received) {
+				slave_cb->write_received(data->slave_cfg, byte_data);
+			}
+		}
+		if (sts & AST_I2CS_STOP) {
 			if (slave_cb->stop) {
 				slave_cb->stop(data->slave_cfg);
 			}
-			cmd = AST_I2CS_ACTIVE_ALL | AST_I2CS_PKT_MODE_EN;
-			if (config->mode == DMA_MODE) {
-				cmd |= AST_I2CS_RX_DMA_EN;
-				sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
-				, i2c_base + AST_I2CS_DMA_LEN);
-			} else if (config->mode == BUFF_MODE) {
-				cmd |= AST_I2CS_RX_BUFF_EN;
-				sys_write32(AST_I2CC_SET_RX_BUF_LEN(I2C_BUF_SIZE)
-				, i2c_base + AST_I2CC_BUFF_CTRL);
-			} else {
-				cmd &= ~AST_I2CS_PKT_MODE_EN;
-			}
-			sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
-			break;
-		case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP:
-		/*LOG_DBG(data->dev, "S : Sw|D|P wait rx dma workaround\n");*/
-		case AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA | AST_I2CS_STOP:
-		/*LOG_DBG(data->dev, "S : D|P wait rx dma workaround\n");*/
-		case AST_I2CS_RX_DONE | AST_I2CS_STOP:
-		case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA:
-		case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_STOP:
-			if (sts & AST_I2CS_STOP) {
-				if (sts & AST_I2CS_SLAVE_MATCH) {
-					LOG_DBG("S : Sw|D|P\n");
-				} else {
-					LOG_DBG("S : D|P\n");
-				}
-			} else {
-				LOG_DBG("S : Sw|D\n");
-			}
+		}
+		sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
+		break;
+	/*it is Mw data Mr coming -> it need send tx*/
+	case AST_I2CS_RX_DONE | AST_I2CS_Wait_TX_DMA:
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_TX_DMA:
+		/*it should be repeat start read*/
+		if (sts & AST_I2CS_SLAVE_MATCH) {
+			LOG_DBG("S: I2CS_W_TX_DMA | I2CS_S_MATCH | I2CS_R_DONE\n");
+		} else {
+			LOG_DBG("S: I2CS_W_TX_DMA | I2CS_R_DONE\n");
+		}
 
-			if (sts & AST_I2CS_SLAVE_MATCH) {
-				if (slave_cb->write_requested) {
-					slave_cb->write_requested(data->slave_cfg);
-				}
+		if (sts & AST_I2CS_SLAVE_MATCH) {
+			if (slave_cb->write_requested) {
+				slave_cb->write_requested(data->slave_cfg);
 			}
+		}
+
+		cmd = SLAVE_TRIGGER_CMD;
+		if (config->mode == DMA_MODE) {
+			cmd |= AST_I2CS_TX_DMA_EN;
+			slave_rx_len =
+			AST_I2C_GET_RX_DMA_LEN(sys_read32(i2c_base + AST_I2CS_DMA_LEN_STS));
 
-			cmd = AST_I2CS_ACTIVE_ALL | AST_I2CS_PKT_MODE_EN;
-			if (config->mode == DMA_MODE) {
-				cmd |= AST_I2CS_RX_DMA_EN;
-				slave_rx_len =
-				AST_I2C_GET_RX_DMA_LEN(sys_read32(i2c_base + AST_I2CS_DMA_LEN_STS));
-				/*aspeed_cache_invalid_data*/
+			for (i = 0; i < slave_rx_len; i++) {
 				cache_data_range((&data->slave_dma_buf[i])
-				, slave_rx_len, K_CACHE_INVD);
-				for (i = 0; i < slave_rx_len; i++) {
-				/*LOG_DBG(data->dev, "[%02x]", data->slave_dma_buf[i]);*/
-					if (slave_cb->write_received) {
-						slave_cb->write_received(data->slave_cfg
-						, data->slave_dma_buf[i]);
-					}
-				}
-				sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
-				, i2c_base + AST_I2CS_DMA_LEN);
-			} else if (config->mode == BUFF_MODE) {
-				LOG_DBG("Slave_Buff");
-				cmd |= AST_I2CS_RX_BUFF_EN;
-				slave_rx_len =
-				AST_I2CC_GET_RX_BUF_LEN(sys_read32(i2c_base + AST_I2CC_BUFF_CTRL));
+				, 1, K_CACHE_INVD);
+				LOG_DBG("rx [%02x]", data->slave_dma_buf[i]);
 				if (slave_cb->write_received) {
-					for (i = 0; i < slave_rx_len ; i++) {
-						slave_cb->write_received(data->slave_cfg
-						, sys_read8(config->buf_base + i));
-					}
+					slave_cb->write_received(data->slave_cfg
+					, data->slave_dma_buf[i]);
 				}
+			}
+
+			if (slave_cb->read_requested) {
+				slave_cb->read_requested(data->slave_cfg
+				, &data->slave_dma_buf[0]);
+			}
+			LOG_DBG("tx [%02x]", data->slave_dma_buf[0]);
 
-				sys_write32(AST_I2CC_SET_RX_BUF_LEN(config->buf_size)
-				, i2c_base + AST_I2CC_BUFF_CTRL);
+			sys_write32(0, i2c_base + AST_I2CS_DMA_LEN_STS);
+			sys_write32((uint32_t)data->slave_dma_buf
+			, i2c_base + AST_I2CS_TX_DMA);
+			sys_write32(AST_I2CS_SET_TX_DMA_LEN(1)
+			, i2c_base + AST_I2CS_DMA_LEN);
+		} else if (config->mode == BUFF_MODE) {
 
-			} else {
-				cmd &= ~AST_I2CS_PKT_MODE_EN;
-				byte_data =
-				AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
-				LOG_DBG("[%02x]", byte_data);
+			cmd |= AST_I2CS_TX_BUFF_EN;
+			slave_rx_len =
+			AST_I2CC_GET_RX_BUF_LEN(sys_read32(i2c_base + AST_I2CC_BUFF_CTRL));
+			for (i = 0; i < slave_rx_len; i++) {
+				LOG_DBG("rx [%02x]", (sys_read32(config->buf_base + i) & 0xFF));
 				if (slave_cb->write_received) {
-					slave_cb->write_received(data->slave_cfg, byte_data);
+					slave_cb->write_received(data->slave_cfg
+					, (sys_read32(config->buf_base + i) & 0xFF));
 				}
 			}
-			if (sts & AST_I2CS_STOP) {
-				if (slave_cb->stop) {
-					slave_cb->stop(data->slave_cfg);
-				}
+
+			if (slave_cb->read_requested) {
+				slave_cb->read_requested(data->slave_cfg, &value);
 			}
+			LOG_DBG("tx [%02x]", value);
 
-			sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
-			break;
-		/*it is Mw data Mr coming -> it need send tx*/
-		case AST_I2CS_RX_DONE | AST_I2CS_Wait_TX_DMA:
-		case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_TX_DMA:
-			/*it should be repeat start read*/
-			if (sts & AST_I2CS_SLAVE_MATCH) {
-				LOG_DBG("S: I2CS_W_TX_DMA | I2CS_S_MATCH | I2CS_R_DONE\n");
-			} else {
-				LOG_DBG("S: I2CS_W_TX_DMA | I2CS_R_DONE\n");
+			sys_write32(value, config->buf_base);
+			sys_write32(AST_I2CC_SET_TX_BUF_LEN(1)
+			, i2c_base + AST_I2CC_BUFF_CTRL);
+		} else {
+			cmd &= ~AST_I2CS_PKT_MODE_EN;
+			cmd |= AST_I2CS_TX_CMD;
+			byte_data = AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+			LOG_DBG("rx : [%02x]", byte_data);
+			if (slave_cb->write_received) {
+				slave_cb->write_received(data->slave_cfg, byte_data);
 			}
+			if (slave_cb->read_requested) {
+				slave_cb->read_requested(data->slave_cfg, &byte_data);
+			}
+			LOG_DBG("tx : [%02x]", byte_data);
+			sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
+		}
+		LOG_DBG("slave cmd %x\n", cmd);
+		sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
+		break;
 
-			if (sts & AST_I2CS_SLAVE_MATCH) {
-				if (slave_cb->write_requested) {
-					slave_cb->write_requested(data->slave_cfg);
-				}
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_Wait_TX_DMA:
+		/*First Start read*/
+		LOG_DBG("S: AST_I2CS_SLAVE_MATCH | AST_I2CS_Wait_TX_DMA\n");
+		cmd = SLAVE_TRIGGER_CMD;
+		if (config->mode == DMA_MODE) {
+			cmd |= AST_I2CS_TX_DMA_EN;
+			if (slave_cb->read_requested) {
+				slave_cb->read_requested(data->slave_cfg
+				, &data->slave_dma_buf[0]);
+			}
+			/*currently i2c slave framework only support one byte request.*/
+			LOG_DBG("tx: [%x]\n", data->slave_dma_buf[0]);
+			sys_write32(AST_I2CS_SET_TX_DMA_LEN(1)
+			, i2c_base + AST_I2CS_DMA_LEN);
+		} else if (config->mode == BUFF_MODE) {
+			cmd |= AST_I2CS_TX_BUFF_EN;
+			if (slave_cb->read_requested) {
+				slave_cb->read_requested(data->slave_cfg, &byte_data);
+			}
+			/* currently i2c slave framework only support one byte request. */
+			LOG_DBG("tx : [%02x]", byte_data);
+			sys_write8(byte_data, config->buf_base);
+			sys_write32(AST_I2CC_SET_TX_BUF_LEN(1)
+			, i2c_base + AST_I2CC_BUFF_CTRL);
+		} else {
+			cmd &= ~AST_I2CS_PKT_MODE_EN;
+			cmd |= AST_I2CS_TX_CMD;
+			if (slave_cb->read_requested) {
+				slave_cb->read_requested(data->slave_cfg, &byte_data);
+			}
+			sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
+		}
+		sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
+		break;
+
+	case AST_I2CS_Wait_TX_DMA:
+		/*it should be next start read*/
+		LOG_DBG("S: AST_I2CS_Wait_TX_DMA\n");
+		cmd = SLAVE_TRIGGER_CMD;
+		if (config->mode == DMA_MODE) {
+			cmd |= AST_I2CS_TX_DMA_EN;
+			if (slave_cb->read_processed) {
+				slave_cb->read_processed(data->slave_cfg
+				, &data->slave_dma_buf[0]);
+			}
+			LOG_DBG("rx : [%02x]", data->slave_dma_buf[0]);
+			sys_write32(0, i2c_base + AST_I2CS_DMA_LEN_STS);
+			sys_write32(AST_I2CS_SET_TX_DMA_LEN(1)
+			, i2c_base + AST_I2CS_DMA_LEN);
+		} else if (config->mode == BUFF_MODE) {
+			cmd |= AST_I2CS_TX_BUFF_EN;
+			if (slave_cb->read_processed) {
+				slave_cb->read_processed(data->slave_cfg, &value);
 			}
+			LOG_DBG("tx: [%02x]\n", value);
+			sys_write8(value, config->buf_base);
+			sys_write32(AST_I2CC_SET_TX_BUF_LEN(1)
+			, i2c_base + AST_I2CC_BUFF_CTRL);
+		} else {
+			cmd &= ~AST_I2CS_PKT_MODE_EN;
+			cmd |= AST_I2CS_TX_CMD;
+			if (slave_cb->read_processed) {
+				slave_cb->read_processed(data->slave_cfg, &byte_data);
+			}
+			LOG_DBG("tx: [%02x]\n", byte_data);
+			sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
+		}
+		sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
+		break;
 
-			cmd = AST_I2CS_ACTIVE_ALL | AST_I2CS_PKT_MODE_EN;
-			if (config->mode == DMA_MODE) {
+	case AST_I2CS_TX_NAK | AST_I2CS_STOP:
+		/*it just tx complete*/
+		LOG_DBG("S: AST_I2CS_TX_NAK | AST_I2CS_STOP\n");
+		cmd = SLAVE_TRIGGER_CMD;
+		if (slave_cb->stop) {
+			slave_cb->stop(data->slave_cfg);
+		}
+		if (config->mode == DMA_MODE) {
+			cmd |= AST_I2CS_RX_DMA_EN;
+			sys_write32(0, i2c_base + AST_I2CS_DMA_LEN_STS);
+			sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
+			, i2c_base + AST_I2CS_DMA_LEN);
+		} else if (config->mode == BUFF_MODE) {
+			cmd |= AST_I2CS_RX_BUFF_EN;
+			sys_write32(AST_I2CC_SET_RX_BUF_LEN(config->buf_size)
+			, i2c_base + AST_I2CC_BUFF_CTRL);
+		} else {
+			cmd &= ~AST_I2CS_PKT_MODE_EN;
+		}
+		sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
+		break;
 
-				cmd |= AST_I2CS_TX_DMA_EN;
-				slave_rx_len =
-				AST_I2C_GET_RX_DMA_LEN(sys_read32(i2c_base + AST_I2CS_DMA_LEN_STS));
+	default:
+		LOG_DBG("TODO slave sts case %x, now %x\n"
+		, sts, sys_read32(i2c_base + AST_I2CS_ISR));
+		break;
+	}
+}
 
-				for (i = 0; i < slave_rx_len; i++) {
-					cache_data_range((&data->slave_dma_buf[i])
-					, 1, K_CACHE_INVD);
-					LOG_DBG("rx [%02x]", data->slave_dma_buf[i]);
-					if (slave_cb->write_received) {
-						slave_cb->write_received(data->slave_cfg
-						, data->slave_dma_buf[i]);
-					}
+void aspeed_i2c_slave_byte_irq(const struct device *dev, uint32_t i2c_base, uint32_t sts)
+{
+	struct i2c_aspeed_data *data = DEV_DATA(dev);
+	const struct i2c_slave_callbacks *slave_cb = data->slave_cfg->callbacks;
+	uint32_t cmd = AST_I2CS_ACTIVE_ALL;
+	uint8_t byte_data = 0;
 
-					if (slave_cb->read_requested) {
-						slave_cb->read_requested(data->slave_cfg
-						, &data->slave_dma_buf[i]);
-					}
-				}
+	LOG_DBG("byte mode\n");
 
-				sys_write32(0, i2c_base + AST_I2CS_DMA_LEN_STS);
-				sys_write32((uint32_t)data->slave_dma_buf
-				, i2c_base + AST_I2CS_TX_DMA);
-				sys_write32(AST_I2CS_SET_TX_DMA_LEN(slave_rx_len)
-				, i2c_base + AST_I2CS_DMA_LEN);
-			} else if (config->mode == BUFF_MODE) {
-
-				cmd |= AST_I2CS_TX_BUFF_EN;
-				slave_rx_len =
-				AST_I2CC_GET_RX_BUF_LEN(sys_read32(i2c_base + AST_I2CC_BUFF_CTRL));
-				for (i = 0; i < slave_rx_len; i++) {
-					if (slave_cb->write_received) {
-						slave_cb->write_received(data->slave_cfg
-						, (sys_read32(config->buf_base + i) & 0xFF));
-					}
+	switch (sts) {
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA:
+		LOG_DBG("S : Sw|D\n");
 
-					if (slave_cb->read_requested) {
-						slave_cb->read_requested(data->slave_cfg, &value);
-					}
+		/* first address match is address */
+		byte_data =
+		AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+		LOG_DBG("addr [%x]", byte_data);
 
-					sys_write32(value, config->buf_base);
+		/* If the record address is still same, it is re-start case. */
+		if ((slave_cb->write_requested) &&
+		byte_data != data->slave_addr_last) {
+			slave_cb->write_requested(data->slave_cfg);
+		}
 
-					sys_write32(AST_I2CC_SET_TX_BUF_LEN(1)
-					, i2c_base + AST_I2CC_BUFF_CTRL);
+		data->slave_addr_last = byte_data;
+		break;
+	case AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA:
+		LOG_DBG("S : D\n");
+		byte_data =
+		AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+		LOG_DBG("rx [%x]", byte_data);
 
-				}
+		if (slave_cb->write_received) {
+			slave_cb->write_received(data->slave_cfg
+			, byte_data);
+		}
+		break;
+	case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_TX_DMA:
+		cmd |= AST_I2CS_TX_CMD;
+		LOG_DBG("S : Sr|D\n");
+		byte_data =
+		AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
+		LOG_DBG("addr : [%02x]", byte_data);
 
-			} else {
-				cmd &= ~AST_I2CS_PKT_MODE_EN;
-				cmd |= AST_I2CS_TX_CMD;
-				byte_data = AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
-				LOG_DBG("rx : [%02x]", byte_data);
-				if (slave_cb->write_received) {
-					slave_cb->write_received(data->slave_cfg, byte_data);
-				}
-				if (slave_cb->read_requested) {
-					slave_cb->read_requested(data->slave_cfg, &byte_data);
-				}
-				LOG_DBG("tx : [%02x]", byte_data);
-				sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
-			}
-			LOG_DBG("slave cmd %x\n", cmd);
-			sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
-			break;
-		case AST_I2CS_SLAVE_MATCH | AST_I2CS_Wait_TX_DMA:
-			/*First Start read*/
-			LOG_DBG("S: AST_I2CS_SLAVE_MATCH | AST_I2CS_Wait_TX_DMA\n");
-			cmd = AST_I2CS_ACTIVE_ALL | AST_I2CS_PKT_MODE_EN;
-			if (config->mode == DMA_MODE) {
-				cmd |= AST_I2CS_TX_DMA_EN;
-				if (slave_cb->read_requested) {
-					slave_cb->read_requested(data->slave_cfg
-					, &data->slave_dma_buf[0]);
-				}
+		if (slave_cb->read_requested) {
+			slave_cb->read_requested(data->slave_cfg
+			, &byte_data);
+		}
 
-				/*currently i2c slave framework only support one byte request.*/
-				LOG_DBG("tx: [%x]\n", data->slave_dma_buf[0]);
-				sys_write32(AST_I2CS_SET_TX_DMA_LEN(1)
-				, i2c_base + AST_I2CS_DMA_LEN);
-
-				/*LOG_DBG("ssif tx len: [%x]\n", data->slave_dma_buf[0]);
-				 *  for (i = 1; i < data->slave_dma_buf[0] + 1; i++) {
-				 *	i2c_slave_event(data->slave, I2C_SLAVE_READ_PROCESSED
-				 *	, &data->slave_dma_buf[i]);
-				 *}
-				 *sys_write32(AST_I2CS_SET_TX_DMA_LEN(data->slave_dma_buf[0])
-				 *, i2c_base + AST_I2CS_DMA_LEN);
-				 */
-
-			} else if (config->mode == BUFF_MODE) {
-				cmd |= AST_I2CS_TX_BUFF_EN;
-				if (slave_cb->read_requested) {
-					slave_cb->read_requested(data->slave_cfg, &byte_data);
-				}
+		LOG_DBG("tx: [%02x]\n", byte_data);
+		sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
+		break;
+	case AST_I2CS_TX_ACK | AST_I2CS_Wait_TX_DMA:
+		cmd |= AST_I2CS_TX_CMD;
+		LOG_DBG("S : D\n");
 
-				/* currently i2c slave framework only support one byte request. */
-				LOG_DBG("tx : [%02x]", byte_data);
-				sys_write8(byte_data, config->buf_base);
-				sys_write32(AST_I2CC_SET_TX_BUF_LEN(1)
-				, i2c_base + AST_I2CC_BUFF_CTRL);
-
-				/*uint8_t wbuf[4];
-				 *LOG_DBG("ssif tx len: [%x]\n", byte_data);
-				 *for (i = 1; i < byte_data + 1; i++) {
-				 *	i2c_slave_event(data->slave
-				 *	, I2C_SLAVE_READ_PROCESSED, &value);
-				 *	wbuf[i % 4] = data[i];
-				 *	if (i % 4 == 3) {
-				 *		sys_write32(*(uint32_t *)wbuf,
-				 *			    data->buf_base + i - 3);
-				 *	}
-				 *}
-				 *if (--i % 4 != 3) {
-				 *	sys_write32(*(uint32_t *)wbuf,
-				 *		    data->buf_base + i - (i % 4));
-				 *}
-				 *sys_write32(AST_I2CC_SET_TX_BUF_LEN(byte_data)
-				 *, AST_I2CC_BUFF_CTRL);
-				 */
-			} else {
-				cmd &= ~AST_I2CS_PKT_MODE_EN;
-				cmd |= AST_I2CS_TX_CMD;
-				if (slave_cb->read_requested) {
-					slave_cb->read_requested(data->slave_cfg, &byte_data);
-				}
-				sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
-			}
-			sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
-			break;
-		case AST_I2CS_Wait_TX_DMA:
-			/*it should be next start read*/
-			LOG_DBG("S: AST_I2CS_Wait_TX_DMA\n");
-			cmd = AST_I2CS_ACTIVE_ALL | AST_I2CS_PKT_MODE_EN;
-			if (config->mode == DMA_MODE) {
-				cmd |= AST_I2CS_TX_DMA_EN;
-				if (slave_cb->read_processed) {
-					slave_cb->read_processed(data->slave_cfg
-					, &data->slave_dma_buf[0]);
-				}
-				LOG_DBG("rx : [%02x]", data->slave_dma_buf[0]);
-				sys_write32(0, i2c_base + AST_I2CS_DMA_LEN_STS);
-				sys_write32(AST_I2CS_SET_TX_DMA_LEN(1)
-				, i2c_base + AST_I2CS_DMA_LEN);
-			} else if (config->mode == BUFF_MODE) {
-				cmd |= AST_I2CS_TX_BUFF_EN;
-				if (slave_cb->read_processed) {
-					slave_cb->read_processed(data->slave_cfg, &value);
-				}
-				LOG_DBG("tx: [%02x]\n", value);
-				sys_write32(value, config->buf_base);
-				sys_write32(AST_I2CC_SET_TX_BUF_LEN(1)
-				, i2c_base + AST_I2CC_BUFF_CTRL);
-			} else {
-				cmd &= ~AST_I2CS_PKT_MODE_EN;
-				cmd |= AST_I2CS_TX_CMD;
-				if (slave_cb->read_processed) {
-					slave_cb->read_processed(data->slave_cfg, &byte_data);
-				}
-				LOG_DBG("tx: [%02x]\n", byte_data);
-				sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
-			}
-			sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
-			break;
-		case AST_I2CS_TX_NAK | AST_I2CS_STOP:
-			/*it just tx complete*/
-			LOG_DBG("S: AST_I2CS_TX_NAK | AST_I2CS_STOP\n");
-			cmd = AST_I2CS_ACTIVE_ALL | AST_I2CS_PKT_MODE_EN;
-			if (slave_cb->stop) {
-				slave_cb->stop(data->slave_cfg);
-			}
-			if (config->mode == DMA_MODE) {
-				cmd |= AST_I2CS_RX_DMA_EN;
-				sys_write32(0, i2c_base + AST_I2CS_DMA_LEN_STS);
-				sys_write32(AST_I2CS_SET_RX_DMA_LEN(I2C_SLAVE_BUF_SIZE)
-				, i2c_base + AST_I2CS_DMA_LEN);
-			} else if (config->mode == BUFF_MODE) {
-				cmd |= AST_I2CS_RX_BUFF_EN;
-				sys_write32(AST_I2CC_SET_RX_BUF_LEN(config->buf_size)
-				, i2c_base + AST_I2CC_BUFF_CTRL);
-			} else {
-				cmd &= ~AST_I2CS_PKT_MODE_EN;
-			}
-			sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
-			break;
-		/*
-		 * case AST_I2CS_RX_DONE | AST_I2CS_Wait_TX_DMA:
-		 *	LOG_DBG("S: AST_I2CS_RX_DONE | AST_I2CS_Wait_TX_DMA TODO\n");
-		 *	slave_rx_len =
-		 *	AST_I2C_GET_RX_DMA_LEN(sys_read32(i2c_base + AST_I2CS_DMA_LEN_STS));
-		 *	LOG_DBG("S: rx len %d\n", slave_rx_len);
-		 *	for (i = 0; i < slave_rx_len; i++) {
-		 *		LOG_DBG("[%x]", data->slave_dma_buf[i]);
-		 *		i2c_slave_event(data->slave, I2C_SLAVE_WRITE_RECEIVED
-		 *		, &data->slave_dma_buf[i]);
-		 *	}
-		 *	sys_write32(AST_I2CS_SET_TX_DMA_LEN(1), i2c_base + AST_I2CS_DMA_LEN);
-		 *	sys_write32(sys_read32(i2c_base + AST_I2CS_CMD_STS) | AST_I2CS_RX_DMA_EN |
-		 *	AST_I2CS_TX_BUFF_EN, i2c_base + AST_I2CS_CMD_STS);
-		 *	break;
-		 */
-		default:
-			LOG_DBG("TODO slave sts case %x, now %x\n"
-			, sts, sys_read32(i2c_base + AST_I2CS_ISR));
-			break;
+		if (slave_cb->read_processed) {
+			slave_cb->read_processed(data->slave_cfg
+			, &byte_data);
+		}
 
+		LOG_DBG("tx: [%02x]\n", byte_data);
+		sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
+		break;
+	case AST_I2CS_STOP:
+		if (slave_cb->stop) {
+			slave_cb->stop(data->slave_cfg);
 		}
-		ret = 1;
-	} else {
-		LOG_DBG("byte mode\n");
-		/*only coming for byte mode*/
-		cmd = AST_I2CS_ACTIVE_ALL;
-		switch (sts) {
-		case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA:
-			LOG_DBG("S : Sw|D\n");
+	case AST_I2CS_STOP | AST_I2CS_TX_NAK:
+		LOG_DBG("S : P\n");
+		/* clear record slave address */
+		data->slave_addr_last = 0x0;
+		break;
+	default:
+		LOG_DBG("TODO no pkt_done intr ~~~ ***** sts %x\n", sts);
+		break;
+	}
+	sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
+	sys_write32(sts, i2c_base + AST_I2CS_ISR);
+}
 
-			/* first address match is address */
-			byte_data =
-			AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
-			LOG_DBG("addr [%x]", byte_data);
+int aspeed_i2c_slave_irq(const struct device *dev)
+{
+	uint32_t i2c_base = DEV_BASE(dev);
+	uint32_t ier = sys_read32(i2c_base + AST_I2CS_IER);
+	uint32_t sts = sys_read32(i2c_base + AST_I2CS_ISR);
 
-			/* If the record address is still same, it is re-start case. */
-			if ((slave_cb->write_requested) &&
-			byte_data != data->slave_addr_last) {
-				slave_cb->write_requested(data->slave_cfg);
-			}
+	/* return without necessary slave interrupt */
+	if (!(sts & ier)) {
+		return 0;
+	}
 
-			data->slave_addr_last = byte_data;
-			break;
-		case AST_I2CS_RX_DONE | AST_I2CS_Wait_RX_DMA:
-			LOG_DBG("S : D\n");
-			byte_data =
-			AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
-			LOG_DBG("rx [%x]", byte_data);
+	LOG_DBG("S irq sts %x, bus %x\n", sts, sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
 
-			if (slave_cb->write_received) {
-				slave_cb->write_received(data->slave_cfg
-				, byte_data);
-			}
-			break;
-		case AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_Wait_TX_DMA:
-			cmd |= AST_I2CS_TX_CMD;
-			LOG_DBG("S : Sr|D\n");
-			byte_data =
-			AST_I2CC_GET_RX_BUFF(sys_read32(i2c_base + AST_I2CC_STS_AND_BUFF));
-			LOG_DBG("addr : [%02x]", byte_data);
+	/* remove unnessary status flags */
+	sts &= ~(AST_I2CS_ADDR_INDICAT_MASK | AST_I2CS_SLAVE_PENDING);
 
-			if (slave_cb->read_requested) {
-				slave_cb->read_requested(data->slave_cfg
-				, &byte_data);
-			}
+	if (AST_I2CS_ADDR1_NAK & sts) {
+		sts &= ~AST_I2CS_ADDR1_NAK;
+	}
 
-			LOG_DBG("tx: [%02x]\n", byte_data);
-			sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
-			break;
-		case AST_I2CS_TX_ACK | AST_I2CS_Wait_TX_DMA:
-			cmd |= AST_I2CS_TX_CMD;
-			LOG_DBG("S : D\n");
+	if (AST_I2CS_ADDR2_NAK & sts) {
+		sts &= ~AST_I2CS_ADDR2_NAK;
+	}
 
-			if (slave_cb->read_processed) {
-				slave_cb->read_processed(data->slave_cfg
-				, &byte_data);
-			}
+	if (AST_I2CS_ADDR3_NAK & sts) {
+		sts &= ~AST_I2CS_ADDR3_NAK;
+	}
 
-			LOG_DBG("tx: [%02x]\n", byte_data);
-			sys_write32(byte_data, i2c_base + AST_I2CC_STS_AND_BUFF);
-			break;
-		case AST_I2CS_STOP:
-			if (slave_cb->stop) {
-				slave_cb->stop(data->slave_cfg);
-			}
-		case AST_I2CS_STOP | AST_I2CS_TX_NAK:
-			LOG_DBG("S : P\n");
-			data->slave_addr_last = 0xFF;
-			break;
-		default:
-			LOG_DBG("TODO no pkt_done intr ~~~ ***** sts %x\n", sts);
-			break;
-		}
-		sys_write32(cmd, i2c_base + AST_I2CS_CMD_STS);
-		sys_write32(sts, i2c_base + AST_I2CS_ISR);
-		ret = 1;
+	if (AST_I2CS_ADDR_MASK & sts) {
+		sts &= ~AST_I2CS_ADDR_MASK;
 	}
 
-	return ret;
+	if (AST_I2CS_PKT_DONE & sts)
+		aspeed_i2c_slave_packet_irq(dev, i2c_base, sts);
+	else
+		aspeed_i2c_slave_byte_irq(dev, i2c_base, sts);
 
+	return 1;
 }
 #endif
 
-- 
2.17.1

