From 9989fcaea3981660ee963a0026c55fc85f9f582c Mon Sep 17 00:00:00 2001
From: Tommy Haung <tommy_huang@aspeedtech.com>
Date: Fri, 24 Dec 2021 13:52:58 +0800
Subject: [PATCH 16/18] drivers:ipmb:add volatile and critical for ipmb read

Add volatile for the current message counter.
Add critical section for whole ipmb_slave_read function.

Signed-off-by: Tommy Haung <tommy_huang@aspeedtech.com>
Change-Id: I50ec2ab9c46f3c967977f7b01ea3a47bced0185e
---
 drivers/i2c/slave/ipmb_slave.c | 39 +++++++++++++++-------------------
 1 file changed, 17 insertions(+), 22 deletions(-)

diff --git a/drivers/i2c/slave/ipmb_slave.c b/drivers/i2c/slave/ipmb_slave.c
index 983fb16482..5f9291c390 100644
--- a/drivers/i2c/slave/ipmb_slave.c
+++ b/drivers/i2c/slave/ipmb_slave.c
@@ -33,8 +33,7 @@ struct i2c_ipmb_slave_data {
 	uint32_t buffer_idx; /* total buffer index */
 	uint32_t msg_index; /* data message index */
 	uint32_t max_msg_count; /* max message count */
-	uint32_t cur_msg_count; /* current message count */
-	uint32_t pend_msg_count; /* pendding message count */
+	uint32_t volatile cur_msg_count; /* current message count */
 };
 
 struct i2c_ipmb_slave_config {
@@ -56,14 +55,6 @@ static int ipmb_slave_write_requested(struct i2c_slave_config *config)
 							struct i2c_ipmb_slave_data,
 							config);
 
-	/* drease cur msg count from pending msg */
-	if (data->pend_msg_count <= data->cur_msg_count) {
-		data->cur_msg_count -= data->pend_msg_count;
-		data->pend_msg_count = 0;
-	} else {
-		LOG_WRN("cur msg %d < pend msg %d", data->cur_msg_count, data->pend_msg_count);
-	}
-
 	/* check the max msg length */
 	if (data->cur_msg_count < data->max_msg_count) {
 
@@ -82,8 +73,7 @@ static int ipmb_slave_write_requested(struct i2c_slave_config *config)
 
 		LOG_DBG("ipmb: slave write data->current %x", (uint32_t)(data->current));
 	} else {
-		/* LOG_INF("ipmb: buffer full"); */
-		LOG_INF("b full");
+		LOG_DBG("ipmb: buffer full");
 		data->current = NULL;
 		return 1;
 	}
@@ -149,8 +139,12 @@ int ipmb_slave_read(const struct device *dev, struct ipmb_msg **ipmb_data, uint8
 	struct i2c_ipmb_slave_data *data = DEV_DATA(dev);
 	sys_snode_t *list_node = NULL;
 	struct ipmb_msg_package *pack = NULL;
-	uint32_t count = data->cur_msg_count;
-	uint32_t countp = data->pend_msg_count;
+	unsigned int key = 0;
+	int ret = 0;
+
+	/* enter critical section for list control and counter */
+	if (!k_is_in_isr())
+		key = irq_lock();
 
 	list_node = sys_slist_peek_head(&(data->list_head));
 
@@ -163,17 +157,19 @@ int ipmb_slave_read(const struct device *dev, struct ipmb_msg **ipmb_data, uint8
 
 		/* remove this item from list */
 		sys_slist_find_and_remove(&(data->list_head), list_node);
-		data->pend_msg_count++;
-		LOG_DBG("ipmb: slave remove successful.");
 
+		data->cur_msg_count--;
+		LOG_DBG("ipmb: slave remove successful.");
 	} else {
-		if (count != countp)
-			LOG_WRN("cur msg %d / pend msg %d", data->cur_msg_count, data->pend_msg_count);
-		LOG_DBG("b em");
-		return 1;
+		LOG_DBG("ipmb slave read: buffer empty!");
+		ret = 1;
 	}
 
-	return 0;
+	/* exit critical section */
+	if (!k_is_in_isr())
+		irq_unlock(key);
+
+	return ret;
 }
 
 static int ipmb_slave_register(const struct device *dev)
@@ -183,7 +179,6 @@ static int ipmb_slave_register(const struct device *dev)
 	/* initial msg index */
 	data->msg_index = 0;
 	data->cur_msg_count = 0;
-	data->pend_msg_count = 0;
 
 	return i2c_slave_register(data->i2c_controller, &data->config);
 }
-- 
2.17.1

