name: build_and_analyze 
on: pull_request
jobs:
  Build-Platforms:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This job matrix will generate a seperate job for all platforms listed.
        platform: [yv35-cl, yv35-bb]
        # Need to set this to false otherwise it will cancle all platform builds if one fails.
      fail-fast: false

    steps:

    - uses: actions/checkout@v2
      with:
        path: ${{ github.event.repository.name }} 
    - name: Install Dependencies
      run: |
        sudo apt-get update

        sudo apt-get install --no-install-recommends \
        ninja-build \
        gperf \
        ccache \
        dfu-util \
        device-tree-compiler \
        gcc-multilib \
        g++-multilib \
        libsdl2-dev \
  
    - name: Setup Python
      uses: actions/setup-python@v2

    # Exactly what it says on the tin.    
    - name: Install requirements
      run: |
        pip install --user -U west
        pip install pyelftools
        
    - name: Init West Project
      run: |
        west init --local ${{ github.event.repository.name }}

    # Sets up python and loads packages from the cache.
    - name: Try Cache
      id: python
      uses: actions/cache@v2
      with:
        path: |
          ./modules
          ./zephyr
        key: west-yml-${{ hashFiles('OpenBIC/west.yml') }}
 
    - name: Cache SDK Toolchain
      id: cache-sdk
      uses: actions/cache@v2
      with:
        path: /home/runner/zephyr-sdk-0.12.4
        key: zephyr-sdk-0.12.4

    - name: Get SDK Toolchain
      if: steps.cache-sdk.outputs.cache-hit != 'true'
      id: download-sdk
      run: |
        wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.12.4/zephyr-sdk-0.12.4-x86_64-linux-setup.run
        
        chmod +x zephyr-sdk-0.12.4-x86_64-linux-setup.run
        
        ./zephyr-sdk-0.12.4-x86_64-linux-setup.run --quiet -- -d /home/runner/zephyr-sdk-0.12.4

        export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
        export ZEPHYR_SDK_INSTALL_DIR=/home/runner/zephyr-sdk-0.12.4

    - name: Update West Project
      run: |
        cd ${{ github.event.repository.name }} 
        west update
  
    - name: Build Platform
      run: |
        cd ${{ github.event.repository.name }} 
        touch meta-facebook/${{ matrix.platform }}/CMakeLists.txt
        west build -p auto -b ast1030_evb meta-facebook/${{ matrix.platform }}/

  run-cppcheck:
    runs-on: ubuntu-latest
    steps:

    - name: Get PR File List 
      shell: bash
      run: |
        URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
        curl -s -X GET -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $URL | jq -r '.[] | .filename' > git_diff.log
        cat git_diff.log 
  
    - name: Check for C/CPP Sources
      shell: bash
      run : |
        CPP_FILE_LIST="/tmp/cppcheck_file_list.log"
        
        # Only keep the source files to check or CPPCheck gets confused.
        sed '/\(c$\|cpp$\|c$\|cc$\|cu$\|cxx$\|h$\|hh$\|hpp$\|hxx$\|tcc$\)/!d' git_diff.log > $CPP_FILE_LIST

        if [ -s $CPP_FILE_LIST ]; then
          echo "C/C++ source files kept:"
          cat $CPP_FILE_LIST
        fi
        
        if [ -s $CPP_FILE_LIST ]; then
          echo "contains_c_source=true" >> $GITHUB_ENV
        else
          echo "contains_c_source=false" >> $GITHUB_ENV
        fi

    - uses: actions/checkout@v2
      name: Checkout Repo
      if: env.contains_c_source == 'true'
        
    - uses: actions/setup-python@v2
      name: Setup Python
      if: env.contains_c_source == 'true'

    - name: Install CPPCheck
      if: env.contains_c_source == 'true'
      run: sudo apt-get install -y cppcheck

    - name: Run CPPCheck on Modified Source Files
      if: env.contains_c_source == 'true'
      continue-on-error: true
      shell: bash
      run: |
        # These files specify the config for cppcheck and a list of errors to suppress
        CPPCHECK_CONFIG=.circleci/lint/cppcheck/cppcheck.cfg
        CPPCHECK_SUPPRESSED=.circleci/lint/cppcheck/cppcheck-suppressions.txt

        echo "Files to check:"
        cat /tmp/cppcheck_file_list.log

        options=( "-j2"
          "--inconclusive"
          "--enable=performance,style,portability,information"
          "--library=.circleci/lint/cppcheck/cppcheck.cfg"
          "--suppressions-list=.circleci/lint/cppcheck/cppcheck-suppressions.txt"
          "--file-list=/tmp/cppcheck_file_list.log"
          "--template={file}:{line}:{column}:{message}"
          "--output-file=/tmp/cppcheck.log"
          "--report-progress")

        cppcheck "${options[@]}"
        
        if [ -s /tmp/cppcheck.log ]; then
          echo "Errors Found:"
          cat /tmp/cppcheck.log
        fi


    - uses: actions/upload-artifact@master
      name: Upload CPPCheck error log
      if: env.contains_c_source == 'true'
      with:
        name: cppcheck-output
        path: /tmp/cppcheck.log

    - name: Check for cppcheck output
      if: env.contains_c_source == 'true'
      run : |
        if [ -s /tmp/cppcheck.log ]; then
          exit 1
        fi

  run-clang-format:
    runs-on: ubuntu-latest
    steps:
      
    - uses: actions/checkout@v2
      name: Checkout Repo

    - name: Get PR File List 
      shell: bash
      run: |
        URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
        curl -s -X GET -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $URL | jq -r '.[] | .filename' > /tmp/change_set.log
        cat /tmp/change_set.log 

    - name: Check for C/CPP Sources
      shell: bash
      run : |
        CLANG_FORMAT_FILE_LIST="/tmp/clang_format_file_list.log"
        
        # Only keep the source files to check or clang-format starts checking everything.
        sed '/\(c$\|cpp$\|c$\|cc$\|cu$\|cxx$\|h$\|hh$\|hpp$\|hxx$\|tcc$\)/!d' /tmp/change_set.log > $CLANG_FORMAT_FILE_LIST

        if [ -s $CLANG_FORMAT_FILE_LIST ]; then
          echo "C/C++ source files kept for clang-format:"
          cat $CLANG_FORMAT_FILE_LIST
        fi
        
        if [ -s $CLANG_FORMAT_FILE_LIST ]; then
          echo "contains_c_source=true" >> $GITHUB_ENV
        else
          echo "contains_c_source=false" >> $GITHUB_ENV
        fi

    - name: Install Clang-Format 
      if: env.contains_c_source == 'true'
      run: sudo apt-get install -y clang-format 

    - name: Run clang-format on changed fileset.
      if: env.contains_c_source == 'true'
      continue-on-error: true
      shell: bash
      run: |
        echo "Files to check:"
        cat /tmp/clang_format_file_list.log 
        
        FILE_PATHS=$(cat /tmp/clang_format_file_list.log)
        for FILE_PATH in $FILE_PATHS
        do
          
          options=( 
            "--style=file"
            "--dry-run"
            "--Werror")
         
          # Clang format outputs to stderr... why do you do this clang-format 
          if ! clang-format "${options[@]}" $FILE_PATH &> /dev/null ; then
            echo $FILE_PATH "has clang-format errors!"
            echo $FILE_PATH >> /tmp/clang-format.log
          fi

        done
  
    - uses: actions/upload-artifact@master
      if: env.contains_c_source == 'true'
      name: Upload clang-format error log
      with:
        name: clang-format-output
        path: /tmp/clang-format.log

    - name: Check for clang-format output
      if: env.contains_c_source == 'true'
      run : |
        if [ -s /tmp/clang-format.log ]; then
          exit 1
        fi

  Aggregate-Lint-Output:
    permissions:
      actions: read
      checks: read
      contents: read
      deployments: read
      issues: read
      packages: read
      pull-requests: write
      repository-projects: read
      security-events: read
      statuses: read

    needs: [run-cppcheck, run-clang-format]
    if: |
        always() && 
        (needs.run-cppcheck.result == 'failure' || 
         needs.run-clang-format.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      
    - uses: actions/checkout@v2
      name: Checkout Repo
     
    - uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest 

    - name: Download all artifacts 
      uses: actions/download-artifact@v2
      with:
        path: /tmp/artifacts

    - name: Load comment variable
      id: load-clang-env-variable
      run: echo "::set-output name=clang-format-comment::$(cat /tmp/artifacts/clang-format-output/clang-format.log)"

    - uses: actions/github-script@v6
      if: needs.run-clang-format.result == 'failure'
      name: Comment on clang-format
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "These files have clang-format errors:\n ${{ steps.load-clang-env-variable.outputs.clang-format-comment}}\n\n You can fix these errors by running \"clang-format --style=file -i $file\" on the effected files"
          })

    - name: Run reviewdog
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CPP_FILE=/tmp/artifacts/cppcheck-output/cppcheck.log
        if test -f "$CPP_FILE"; then
          cat "$CPP_FILE" | reviewdog -efm="%f:%l:%c:%m" -filter-mode=nofilter -reporter=github-pr-check
        fi

